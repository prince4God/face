grammar com.epistimis.face.Face with com.epistimis.uddl.Uddl

generate face "http://www.epistimis.com/face/Face"

import "http://www.epistimis.com/uddl/Uddl" as uddl

//// Starter rule comes first
//@Override
//ModelFile:
//	includes+=Include*
//	archModel=ArchitectureModel
//;

/** An ArchitectureModel is a container for DataModels, UoPModels, IntegrationModels, and TraceabilityModels. */	
ArchitectureModel:
	'am' name=ID description=STRING '{'
	(dm+=DataModel | um+=UopUoPModel | im+=IntegrationIntegrationModel)+
	'}'
;

/** An Element is the root type for defining all named elements in the ArchitectureModel. The “name” attribute captures the name of the Element in the model. The “description” attribute captures a description for the element. 
 *  NOTE: Because of the way XText works, attributes bubble up from the bottom. So 'name' and 'description' are specified in leaf rules but show up in 
 *  the generated API for FaceElement
 * */
FaceElement:
	ArchitectureModel |
	UopUoPModel |
	IntegrationIntegrationModel |
	UopElement |
	IntegrationElement |
	IntegrationTransportNode
;

enum UoPClientServerRole:
	CLIENT='client' | SERVER='server'
;

/** The FaceProfile enumeration captures the OS API subsets for a UoP as defined by the OSS. */
enum UopFaceProfile:
	GENERAL_PURPOSE = 'GeneralPurpose' |
	SECURITY = 'Security' |
	SAFETY_BASE = 'SafetyBase' |
	SAFETY_EXTENDED = 'SafetyExtended'
;

enum UopDesignAssuranceLevel:
	A='a' | B='b' | C='c' | D='d' | E='e'
;

enum UopDesignAssuranceStandard:
	DO_178B_ED_12B='DO_178B_ED_12B' |
	DO_178C_ED_12C='DO_178C_ED_12C'
;

/** The MessageExchangeType enumeration captures the options for the message exchange type of a UoP port as defined by the TS Interface. */
enum UopMessageExchangeType:
	INBOUND_MESSAGE='InboundMessage' |
	OUTBOUND_MESSAGE='OutboundMessage'
;

/** The PartitionType enumeration captures the OS API types for a UoP as defined by the OSS. */
enum UopPartitionType:
	POSIX='POSIX' | ARINC653='ARINC653'
;

/** The ProgrammingLanguage enumeration captures the options for programming language API bindings as defined by Section 4.14. */
enum UopProgrammingLanguage:
	UNSPECIFIED = 'Unspecified' | // EXTENSION: Make it possible to not specify a language - this is first so it gets the '0' value, so if no value is specified, this one will be assumed
	C='C' | CPP='cpp' | JAVA='Java' | ADA='Ada' 
	// EXTENSION: Additional languages not supported by FACE
	| GO='Go' | JS='Javascript' | PYTHON='Python' | RUST = 'Rust' | SCALA='Scala' | SQL='SQL' | TS='Typescript' 
;

/** The SynchronizationStyle enumeration captures the options for the synchronization style of a UoP port as defined by the TS Interface. */
enum UopSynchronizationStyle:
	BLOCKING='Blocking' | NON_BLOCKING='NonBlocking'
;

enum UopThreadType:
	FOREGROUND='Foreground'| BACKGROUND='Background'
;

/** A UoPModel is a container for UoC Elements. */
UopUoPModel:
	'um' name=ID description=STRING '{'
		(um+=UopUoPModel | element +=UopElement)+
	'}'
;

/** A uop Element is the root type for defining the component elements of the ArchitectureModel. */
UopElement: 
	UopSupportingComponent |
	UopUnitOfPortability |
	UopAbstractUoP |
	UopMessageType

;

/** A SupportingComponent is a LanguageRunTime or ApplicationFramework. The “version” attribute is the version of the SupportingComponent. */
UopSupportingComponent:
	UopComponentFramework |
	UopLanguageRuntime
;

/** A LanguageRunTime is a language run-time as defined in Section 4.2.3. */
UopLanguageRuntime:
	'runtime' name=ID ':' version=ID description=STRING ';'
;

/** A ComponentFramework is an application framework as defined in Section 4.2.4. */
UopComponentFramework:
	'framework' name=ID ':' version=ID description=STRING ';'
;

/** An AbstractUoP is used to capture the specification of a UoP. */
UopAbstractUoP:
	'aUoP' name=ID description=STRING '{'
		(connection+=UopAbstractConnection)*
	'};'	
;

/** An AbstractConnection captures the input and output characteristics of an AbstractUoP by specifying data at a Logical or Conceptual level. */
UopAbstractConnection:
	'aconn' name=ID description=STRING '{'
		( 'c' conceptualView=[uddl::ConceptualView|QN])? 
		( 'l' logicalView=[uddl::LogicalView|QN])?
	'};'	
;

/** A UnitOfPortability is a FACE PlatformSpecificComponent or PortableComponent. */
UopUnitOfPortability:	
	UopPortableComponent |
	UopPlatformSpecificComponent
	;

/** A PortableComponent is a software component as defined by the PCS. */
UopPortableComponent:	
	'pc'  name=ID description=STRING ('->' realizes=[UopAbstractUoP|QN])? '{'
		'lang:' transportAPILanguage=UopProgrammingLanguage
		('part:' partitionType=UopPartitionType)? 	// EXTENSION: making partitionType optional
		('prof:' faceProfile=UopFaceProfile)?  		// EXTENSION: making faceProfile optional
		('DAL:' designAssuranceLevel=UopDesignAssuranceLevel)?
		('DAS:' designAssuranceStandard=UopDesignAssuranceStandard)?
		('RAM:' memoryRequirements=UopRAMMemoryRequirements)? // EXTENSION: making memoryRequirements optional
		('thread:' '[' thread+=UopThread+ ']')?		// EXTENSION: making thread optional
		('support:' '[' supportingComponent+=[UopSupportingComponent|QN]+ ']')? 
		'conn:' '[' connection+=UopConnection+ ']'
		('lcm:' '[' lcmPort+=UopLifeCycleManagementPort lcmPort+=UopLifeCycleManagementPort? ']' )?
		('implementedBy:' implementedBy=[IntegrationIntegrationContext|QN])? // EXTENSION: can supply a wiring diagram with implementation details
	'};'
;

/** A PlatformSpecificComponent is a software component as defined by the PSSS. */
UopPlatformSpecificComponent:	
	 'psc' name=ID description=STRING ('->' realizes=[UopAbstractUoP|QN])? '{'
		'lang:' transportAPILanguage=UopProgrammingLanguage
		('part:' partitionType=UopPartitionType)? 	// EXTENSION: making partitionType optional
		('prof:' faceProfile=UopFaceProfile)?  		// EXTENSION: making faceProfile optional
		('DAL:' designAssuranceLevel=UopDesignAssuranceLevel)?
		('DAS:' designAssuranceStandard=UopDesignAssuranceStandard)?
		('RAM:' memoryRequirements=UopRAMMemoryRequirements)? // EXTENSION: making memoryRequirements optional
		('thread:' '[' thread+=UopThread+ ']')?		// EXTENSION: making thread optional
		('support:' '[' supportingComponent+=[UopSupportingComponent|QN]+ ']')? 
		'conn:' '[' connection+=UopConnection+ ']'
		('lcm:' '[' lcmPort+=UopLifeCycleManagementPort lcmPort+=UopLifeCycleManagementPort? ']' )?
		('implementedBy:' implementedBy=[IntegrationIntegrationContext|QN])? // EXTENSION: can supply a wiring diagram with implementation details
	'};'
;

/** A Thread defines the properties for the scheduling of a thread. */
UopThread: '(' 
	'per:' period=FLOAT 
	'timeCap:' timeCapacity=FLOAT 
	'prio:' relativePriority=INT 
	'core:' relativeCoreAffinity=INT
	'thread:' threadType=UopThreadType
	')'
	;

/** A RAMMemoryRequirements defines memory resources required by a UoP. */
UopRAMMemoryRequirements:
	{UopRAMMemoryRequirements}
	'('
	('heap:' '[' heapStackMin=INT? ':' heapStackTypical=INT? ':' heapStackMax=INT? ']')?
	('text:' 	textMax=INT)?
	('roData:' 	roDataMax=INT)?
	('data:' 	dataMax=INT)?
	('bss:' 	bssMax=INT)?
	')'
;

/** A Connection is a communication endpoint on a FACE UoP. A Connection is either a Publisher, Subscriber, Client, or Server. The “messageType” specifies the platform View that is transmitted through the endpoint. If “period” is not specified, the endpoint is aperiodic. If “period” is specified, the value is the period of the endpoint in seconds. */
UopConnection:
	UopPubSubConnection |
	UopClientServerConnection
;

/** A ClientServerConnection is a Request/Reply Connection as defined in Section 4.7. */
UopClientServerConnection:
	'csconn' name=ID description=STRING ('->' realizes=[UopAbstractConnection|QN])? '{'
	 	'msg:' '[' requestType=[UopMessageType|QN] '/' responseType=[UopMessageType|QN] ']'
	 		   (synchronizationStyle=UopSynchronizationStyle)?
	 	'role:' role=UoPClientServerRole
	 	('period:' period=FLOAT)?
		('mapsTo:' mapsTo=[IntegrationTransportNode|QN])? // EXTENSION: If the owning UoPComponent has an implementing IC, this should map to a TransportNode in that IC
	'}'
;

/** A PubSubConnection is a QueuingConnection or a SingleInstanceMessageConnection. The “messageExchangeType” attribute defines the direction of the message relative to the UoP. */
UopPubSubConnection:
	UopQueuingConnection |
	UopSingleInstanceMessageConnection
;

/** A QueuingConnection is a PubSubConnection that supports buffering/queuing as defined in Section 4.8.  */
UopQueuingConnection:
	'qconn' name=ID description=STRING ('->' realizes=[UopAbstractConnection|QN])? '{'
	 	'msg:'  messageExchangeType=UopMessageExchangeType 
	 			messageType=[UopMessageType|QN]
	 			(synchronizationStyle=UopSynchronizationStyle)? 
		('depth:' depth=INT)?
	 	('period:' period=FLOAT)?
		('mapsTo:' mapsTo=[IntegrationTransportNode|QN])? // EXTENSION: If the owning UoPComponent has an implementing IC, this should map to a TransportNode in that IC
		'}'
;

/** A SingleInstanceMessageConnection is a PubSubConnection that supports single instance messaging as defined in Section 4.8.  */
UopSingleInstanceMessageConnection:
	'simconn' name=ID description=STRING ('->' realizes=[UopAbstractConnection|QN])? '{'
	 	'msg:'  messageExchangeType=UopMessageExchangeType 
	 			messageType=[UopMessageType|QN]
	 			(synchronizationStyle=UopSynchronizationStyle )?
	 	('period:' period=FLOAT)?
		('mapsTo:' mapsTo=[IntegrationTransportNode|QN])? // EXTENSION: If the owning UoPComponent has an implementing IC, this should map to a TransportNode in that IC
		'}'
;

/** A LifeCycleManagementPort is used to define the life-cycle interface for the component. The “messageExchangeType” attribute defines the direction of the life-cycle message relative to the UoP.  */
UopLifeCycleManagementPort:
	'(' messageExchangeType=UopMessageExchangeType lcmMessageType=[UopMessageType|QN] ')'
;

/** A MessageType is a Template or a CompositeTemplate. */
UopMessageType:
	UopTemplate |
	UopCompositeTemplate
;

/** A CompositeTemplate is a collection of two or more Templates. The “isUnion” attribute specifies whether the composed Templates are to be represented as cases in an IDL union or as members of an IDL struct. */
UopCompositeTemplate:
	'ctempl' name=ID description=STRING ('->' realizes=[uddl::LogicalCompositeQuery|QN])? '{'
		isUnion?='isUnion'
		composition+=UopTemplateComposition (composition+=UopTemplateComposition)+
	'};'
;

/** A TemplateComposition is the mechanism that allows a CompositeTemplate to be constructed from Templates and other CompositeTemplates. The “rolename” attribute defines the name of the composed platform View within the scope of the composing CompositeTemplate. The “type” of a TemplateComposition is the platform View being used to construct the CompositeTemplate. */
UopTemplateComposition:
	type=[UopMessageType|QN] rolename=STRING ('->' realizes=[uddl::LogicalQueryComposition|QN])?
;

/** A Template is a specification that defines a structure for Characteristics projected by its “boundQuery” or its “effectiveQuery”. The “specification” attribute captures the specification of a Template as defined by the Template grammar in Section J.4.  */
UopTemplate:
	'templ' name=ID description=STRING  '{'
		'spec:' specification=STRING
		'bound:' boundQuery=[uddl::PlatformQuery|QN]
		('effective:' effectiveQuery=[uddl::PlatformQuery|QN])?
	'};'	
;

// -------------- Integration -----------


// ----
/** An IntegrationModel is a container for integration Elements.  */
IntegrationIntegrationModel:
	'im' name=ID description=STRING '{'
		(im+=IntegrationIntegrationModel | element+=IntegrationElement)*
	'}'
;

/** An integration Element is the root type for defining the integration elements of the ArchitectureModel. */
IntegrationElement:
	IntegrationUoPInstance |
	IntegrationTransportChannel |
	IntegrationIntegrationContext
;

/** An IntegrationContext is a container used to group a set of TransportNodes and TSNodeConnections related to each other by a common, integrator defined context (e.g., collection and distribution of navigation data). */
IntegrationIntegrationContext:
	'ic' name=ID description=STRING '{'
		('xport:''[' node+=IntegrationTransportNode+ ']')?
		('conn:' '['connection+=IntegrationTSNodeConnection+ ']')?
	'}'
;

/** A TSNodeConnection represents a connection between two TransportNodes. 
 * NOTE: This rule as defined subsumes the functionality of the derived classes from the spec.
 */
IntegrationTSNodeConnection:
	// Could make U2U the default
	'(' ('U2U')? source=[IntegrationUoPOutputEndPoint|QN] '->' destination=[IntegrationUoPInputEndPoint|QN] ')' |
	'(' 'U2T' source=[IntegrationUoPOutputEndPoint|QN] '->' destination=[IntegrationTSNodeInputPort|QN] ')' |
	'(' 'T2U' source=[IntegrationTSNodeOutputPort|QN] '->' destination=[IntegrationUoPInputEndPoint|QN] ')' |
	'(' 'T2T' source=[IntegrationTSNodeOutputPort|QN] '->' destination=[IntegrationTSNodeInputPort|QN] ')' 
;

/** A TSNodePortBase is a port that can be used to connect a TransportNode and a UoPEndPoint together using a TSNodeConnection. */
IntegrationTSNodePortBase:
//	IntegrationUoPEndPoint |
//	IntegrationTSNodePort
// Directly insert these rules because the intermediate rules lead to a grammar ambiguity
	IntegrationUoPInputEndPoint |
	IntegrationUoPOutputEndPoint |
	IntegrationTSNodeInputPort |
	IntegrationTSNodeOutputPort
;

/** A UoPInstance represents an instance of a specific UoP within the system bounded by an integration model. An integration model can contain multiple instances of the same UoP. */
IntegrationUoPInstance:
	'uinst' name=ID description=STRING '->' realizes=[UopUnitOfPortability|QN]  '{'
		('uri:' configurationURI=STRING)?
		('input:' '[' input+=IntegrationUoPInputEndPoint+ ']')?
		('output:' '[' output+=IntegrationUoPOutputEndPoint+ ']')?
	'};'
;

// EXTENSION: Technically, the IntegrationTSNodeConnection rule sidesteps any need for this rule.
/** A UoPEndPoint is a specialization of a TSNodePortBase that allows connections in a UoPInstance to be part of a TSNodeConnection. This supports connecting UOP input and output endpoints to each other and to transport node input and output ports. */
//IntegrationUoPEndPoint:
//	IntegrationUoPInputEndPoint |
//	IntegrationUoPOutputEndPoint
//;

/** A UoPInputEndPoint is a specialization of a UoPEndPoint providing an endpoint which is used to input data to a UoP. */
IntegrationUoPInputEndPoint:
	connection=[UopConnection|QN]
;

/** A UoPOutputEndPoint is a specialization of a UoPEndPoint providing an endpoint which is used to output data from a UoP. */
IntegrationUoPOutputEndPoint:
	 connection=[UopConnection|QN] 
;

/** A TransportNode is an abstraction of a node that performs a function along a path of communication from source UoPs to destination UoPs.  */
IntegrationTransportNode:
	IntegrationViewTransporter |
	IntegrationViewAggregation |
	IntegrationViewTransformation |
	IntegrationViewFilter |
	IntegrationViewSink |
	IntegrationViewSource
;

// EXTENSION: Technically, the IntegrationTSNodeConnection rule sidesteps any need for this rule.
/** A TSNodePort is a port that provides a connection point to a TransportNode. A TSNodePort is typed by the “view” it references. */
//IntegrationTSNodePort:
//	IntegrationTSNodeOutputPort | 
//	IntegrationTSNodeInputPort	
//;

/** A TSNodeInputPort is a specialization of a TSNodePort providing an endpoint which is used to input data to a TransportNode. */
IntegrationTSNodeInputPort:
	 view=[UopMessageType|QN]
;

/** A TSNodeOutputPort is a specialization of a TSNodePort providing an endpoint which is used to output data from a TransportNode. */
IntegrationTSNodeOutputPort: 
	 view=[UopMessageType|QN]
;

/** A ViewAggregation represents of an instance of aggregation of data from multiple incoming views into a single outgoing view type, including transformation of input data to that required by the output view type. */
IntegrationViewAggregation:
	'agg' name=ID description=STRING '{'
		'in:' '[' inPort+=IntegrationTSNodeInputPort+ ']'
		'out:'  outPort=IntegrationTSNodeOutputPort 
	'};'
;

/** A ViewFilter represents of an instance of a filter of data allowing a view to either pass through a filter, or to be filtered out (i.e., not passed through). A ViewFilter performs no transformation of data. */
IntegrationViewFilter:
	'filter' name=ID description=STRING '{'
		'in:' '[' inPort+=IntegrationTSNodeInputPort+ ']'
		('out:'  outPort=IntegrationTSNodeOutputPort )?
	'};'
;

/** A ViewSource is a TransportNode that only provides a View. */
IntegrationViewSource:
	'src' name=ID description=STRING '{'
		('in:' '[' inPort+=IntegrationTSNodeInputPort+ ']')?
		'out:'  outPort=IntegrationTSNodeOutputPort 
	'};'
;

/** A ViewSink is a TransportNode that only receives a View. */
IntegrationViewSink:
	'sink' name=ID description=STRING '{'
		'in:' '[' inPort+=IntegrationTSNodeInputPort+ ']'
		('out:'  outPort=IntegrationTSNodeOutputPort )?
	'};'
;

/** A ViewTransformation represents an instance of transformation of data from one view type to another. */
IntegrationViewTransformation:
	'xform' name=ID description=STRING '{'
		'in:' '[' inPort+=IntegrationTSNodeInputPort+ ']'
		'out:'  outPort=IntegrationTSNodeOutputPort 
	'};'
;

/** A ViewTransporter represents the use of a TransportChannel with the intent of moving a view over it. */
IntegrationViewTransporter:
	'xport' name=ID description=STRING '{'
		'in:' '[' inPort+=IntegrationTSNodeInputPort+ ']'
		'out:'  outPort=IntegrationTSNodeOutputPort 
		'chan:' channel=[IntegrationTransportChannel|QN]
	'};'
;

/** A TransportChannel is a placeholder for an integrator supplied configuration between transport endpoints. */
IntegrationTransportChannel:
	'itc' name=ID description=STRING ';'
;