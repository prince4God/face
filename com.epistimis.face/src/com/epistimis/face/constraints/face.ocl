/**
 * UDDL standard constraints - adjusted for this metamodel
 */
import uddl : 'platform:/plugin/com.epistimis.uddl/model/generated/Uddl.ecore'
import   'platform:/plugin/com.epistimis.face/model/generated/Face.ecore'
--import  '../../../../../model/generated/Face.ecore'

-- include 'conceptual.ocl'
-- include 'logical.ocl'
-- include 'platform.ocl'
-- include 'uop.ocl'
-- include 'integration.ocl'

package uddl


endpackage

package face
   context FaceElement /*
     * Helper method that determines if a string is a valid identifier.
     * An identifier is valid if it consists of alphanumeric characters.
     */
	static def: isValidIdentifier(str : String) : Boolean = 
		str.size() > 0 and str.replaceAll('[a-zA-Z][_a-zA-Z0-9]*', '').size() = 0
    /*
     * Helper method that determines if a string is an IDL 4.1 keyword.
     */
	static def: isReservedWord(str : String) : Boolean = 
		let strLower : String = str.toLowerCase() in
			(strLower = 'abstract') or 
			(strLower = 'alias') or 
			(strLower = 'any') or 
			(strLower = 'attribute') or 
			(strLower = 'bitfield') or 
			(strLower = 'bitmask') or 
			(strLower = 'bitset') or 
			(strLower = 'boolean') or 
			(strLower = 'case') or 
			(strLower = 'char') or 
			(strLower = 'component') or 
			(strLower = 'connector') or 
			(strLower = 'const') or 
			(strLower = 'consumes') or 
			(strLower = 'context') or 
			(strLower = 'custom') or 
			(strLower = 'default') or 
			(strLower = 'double') or 
			(strLower = 'emits') or 
			(strLower = 'enum') or 
			(strLower = 'eventtype') or 
			(strLower = 'exception') or 
			(strLower = 'factory') or 
			(strLower = 'false') or 
			(strLower = 'finder') or 
			(strLower = 'fixed') or 
			(strLower = 'float') or 
			(strLower = 'getraises') or 
			(strLower = 'home') or 
			(strLower = 'import') or 
			(strLower = 'in') or 
			(strLower = 'inout') or 
			(strLower = 'interface') or 
			(strLower = 'local') or 
			(strLower = 'long') or 
			(strLower = 'manages') or 
			(strLower = 'map') or 
			(strLower = 'mirrorport') or 
			(strLower = 'module') or 
			(strLower = 'multiple') or 
			(strLower = 'native') or 
			(strLower = 'object') or 
			(strLower = 'octet') or 
			(strLower = 'oneway') or 
			(strLower = 'out') or 
			(strLower = 'port') or 
			(strLower = 'porttype') or 
			(strLower = 'primarykey') or 
			(strLower = 'private') or 
			(strLower = 'provides') or 
			(strLower = 'public') or 
			(strLower = 'publishes') or 
			(strLower = 'raises') or 
			(strLower = 'readonly') or 
			(strLower = 'sequence') or 
			(strLower = 'setraises') or 
			(strLower = 'short') or 
			(strLower = 'string') or 
			(strLower = 'struct') or 
			(strLower = 'supports') or 
			(strLower = 'switch') or 
			(strLower = 'true') or 
			(strLower = 'truncatable') or 
			(strLower = 'typedef') or 
			(strLower = 'typeid') or 
			(strLower = 'typename') or 
			(strLower = 'typeprefix') or 
			(strLower = 'union') or 
			(strLower = 'unsigned') or 
			(strLower = 'uses') or 
			(strLower = 'valuebase') or 
			(strLower = 'valuetype') or 
			(strLower = 'void') or 
			(strLower = 'wchar') or 
			(strLower = 'wstring')

    /*
     * The name of an Element is a valid identifier.
     */
	inv nameIsValidIdentifier: FaceElement::isValidIdentifier(self.name)

 
       
/*
 * XText enforces unique names automatically so this is redundant
 */       
--  context ArchitectureModel  

    /*
     * Every uddl::Element in an ArchitectureModel has a unique name.
	 * 
	 * Note: This is equivalent constraint to hasUniqueName. 
	 *		Original constraint modified to work with Kepler
     */
--    inv childModelsHaveUniqueNames:
--    /* This set isn't all uddl::Element */
--      let children : Set(uddl::Element)= 
--       /* dm contains uddl::Element */
--        self.dm.oclAsType(uddl::Element)->union(
--        	/* UoPUoPModel recursively containss itself and UopElement */
--        self.um.oclAsType(UopElement)->union(
--        	/* im contains IntegrationIntegrationModel and IntegrationElement */
--        self.im.oclAsType(IntegrationElement)
--        /*->union(self.tm.oclAsType(uddl::Element))) */ /* traceability model not included */
--        )) 
--        
--        in
--        
--      children->isUnique(name.toLowerCase())

-- Original version from spec:	  
-- context ArchitectureModel 
--	/*
--     * Every Element in an ArchitectureModel has a unique name.
--	 */
--	inv hasUniqueName:
--		let children : Bag(String)=
--			self.dm->collect(name.toLowerCase())->union( 
--				self.um->collect(name.toLowerCase())->union( 
--					self.im->collect(name.toLowerCase())
---- TODO: uncomment if we start to  use the traceability model
----						->union( self.tm->collect(name.toLowerCase()))
--				)
--			) in
--			children->size() = children->asSet()->size()

endpackage