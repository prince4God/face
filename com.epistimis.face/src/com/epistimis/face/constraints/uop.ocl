/**
 * UDDL standard constraints - adjusted for this metamodel
 */
import uddl : 'platform:/plugin/com.epistimis.uddl/model/generated/Uddl.ecore'
--import  '../../../../../model/generated/Face.ecore'
import 'platform:/plugin/com.epistimis.face/model/generated/Face.ecore'

-- include 'platform.ocl'
--include 'face.ocl'
include 'platform:/plugin/com.epistimis.face/src/com/epistimis/face/constraints/face.ocl'

package face

--  context UopElement
--    /*
--     * All UoP Elements have a unique name.
--     * 
--     * NOTE: XText automatically enforces unique FQNs - which is all we care about
--     */
--    inv hasUniqueName:
--      not UopElement.allInstances()->excluding(self)
--                                ->collect(name)
--                                ->includes(self.name)

  context UopConnection
    /*
     * Helper method that gets the Views associated with a UopConnection.
     */
    def: getViews() : Set(UopMessageType) =
      if self.oclIsKindOf(UopPubSubConnection) then
         self.oclAsType(UopPubSubConnection).messageType.oclAsSet()
      else -- self.oclIsTypeOf(UopClientServerConnection)
        self.oclAsType(UopClientServerConnection).requestType
          ->including(self.oclAsType(UopClientServerConnection).responseType)
      endif
  
    /* 
     * If a UopConnection realizes an AbstractConnection,
     * its requestType or responseType or both (for ClientServerConnections) or
     * its messageType (for PubSubConnections) realizes either the
     * AbstractConnection's logicalView or a logical View that realizes the
     * AbstractConnection's conceptualView.
     */
    inv realizationTypeConsistent:
      self.realizes <> null implies
           
      self.getViews()->exists(view | 
      
      if view.oclIsTypeOf(UopCompositeTemplate) then
        let cTemplate
          = view.oclAsType(UopCompositeTemplate) in
      
        if self.realizes.logicalView <> null then
          cTemplate.realizes <> null and
          cTemplate.realizes = self.realizes.logicalView
        else -- self.realizes.conceptualView <> null
          cTemplate.realizes <> null and
          cTemplate.realizes.realizes <> null and
          cTemplate.realizes.realizes = self.realizes.conceptualView
        endif
 

      else -- self.requestType.oclIsTypeOf(Template)
        let lbTemplate = view.oclAsType(UopTemplate) in
         
        lbTemplate.effectiveQuery <> null implies
        
        if self.realizes.logicalView <> null then
          lbTemplate.effectiveQuery.realizes <> null and
          lbTemplate.effectiveQuery.realizes = self.realizes.logicalView
        else -- self.realizes.conceptualView <> null
          lbTemplate.effectiveQuery.realizes <> null and
          lbTemplate.effectiveQuery.realizes.realizes <> null and
          lbTemplate.effectiveQuery.realizes.realizes
            = self.realizes.conceptualView
        endif
       
   

      endif
      )

  context UopQueuingConnection
    /*
     * A UopQueuingConnection's queue depth is greater than zero.
     */
    inv depthValid:
      self.depth > 0

  context UopAbstractUoP
    /*
     * An UopAbstractUoP is entirely logical or entirely conceptual.
     * (Its AbstractConnections all have their logicalView set and
     * conceptualView not set or all have their conceptualView set and
     * logicalView not set.)
     */
    inv onlyLogicalOrOnlyConceptual:      
      self.connection->collect(logicalView)->forAll(lv | lv <> null) xor
      self.connection->collect(conceptualView)->forAll(cv | cv <> null)
   
   context UopUnitOfPortability
    /*
     * If a UoP "A" realizes an UopAbstractUoP "B", then A and B
     * have the same number of connections, and every UopConnection in A
     * realizes a unique AbstractConnection in B.
     * If a UoP does not realize an UopAbstractUoP, none of its Connections
     * realize.
     */
    -- This differs from FACE 3.0 spec, because the Kepler engine:
    --  - requires asBag() reject oclIsUndefined() (for some reason...)
    inv connectionsConsistentWithUoPRealization:
      if self.realizes <> null then
        self.connection->collect(realizes) = self.realizes.connection->asBag()->reject(oclIsUndefined())
      else
        self.connection->collect(realizes)->forAll(ac | ac = null)
      endif

   context UopMessageType 
   	/*
   	 * A Platform Element's name is not an IDL reserved word.
     */
	inv nameIsNotReservedWord:
		not FaceElement::isReservedWord(self.name)
		
   context UopCompositeTemplate 
	/*
     * A TemplateComposition's rolename is unique within a CompositeTemplate.
     */
     
	inv compositionsHaveUniqueRolenames: 
		self.composition->collect(rolename) ->isUnique(rn | rn)

  	/*
     * A CompositeTemplate does not compose itself.
     */
	inv noCyclesInConstruction:
		let composedTemplates = self.composition
									->collect(type) ->selectByKind(UopCompositeTemplate) ->closure(composition
									->collect(type) ->selectByKind(UopCompositeTemplate)) in
		not composedTemplates->includes(self)

  	/*
     * A CompositeTemplate does not compose the same Template more than once.
     */
	inv viewComposedOnce: 
		self.composition->collect(type)->isUnique(view | view)  

 	/*
     * TemplateCompositions in a platform CompositeTemplate realize
     * QueryCompositions in the logical CompositeQuery that the platform
     * CompositeTemplate realizes.
     */
	inv compositionsConsistentWithRealization: 
		if self.realizes = null
		then
			self.composition->forAll(c | c.realizes = null) 
		else
			self.composition->forAll(c | self.realizes.composition->exists(c2 | c.realizes = c2)
			)
		endif

  	/*
     * A CompositeTemplate that realizes has the same "isUnion" property
     * as the CompositeQuery it realizes.
     */
	inv realizationUnionConsistent:
		self.realizes->forAll(realized | self.isUnion = realized.isUnion)

  	/*
     * A CompositeTemplate does not contain two TemplateCompositions
     * that realize the same QueryComposition.
     */
	inv realizedCompositionsHaveDifferentTypes: 
		self.realizes <> null implies 
		self.composition->forAll(c1, c2 | c1 <> c2 implies
											c1.realizes <> c2.realizes)

   context UopTemplateComposition 

   /*
    * The rolename of a TemplateComposition is a valid identifier.
    */
	inv rolenameIsValidIdentifier: FaceElement::isValidIdentifier(self.rolename)

   /*
    * The rolename of a TemplateComposition is not an IDL reserved word.
    */
	inv rolenameIsNotReservedWord:
		not FaceElement::isReservedWord(self.rolename)
   /*
    * If TemplateComposition "A" realizes QueryComposition "B", then
    * if A's type is a CompositeTemplate, then A's type realizes B's type, and
    * if A's type is a Template and defines an effectiveQuery,
    * then A's type's effectiveQuery realizes B's type.
    */
	inv typeConsistentWithRealization:
		self.realizes <> null implies
			if self.type.oclIsTypeOf(UopCompositeTemplate) then
				self.type.oclAsType(UopCompositeTemplate).realizes = self.realizes.type
			else
				self.type.oclAsType(UopTemplate).effectiveQuery <> null
					implies 
				self.type.oclAsType(UopTemplate).effectiveQuery.realizes
					= self.realizes.type endif    
endpackage