/*
 * generated by Xtext 2.28.0
 */
package com.epistimis.face.validation;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.validation.EValidatorRegistrar;

import com.epistimis.face.face.FacePackage;
import com.epistimis.face.generator.QueryUtilities;
import com.epistimis.uddl.scoping.IndexUtilities;
import com.google.inject.Inject;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class FaceValidator extends AbstractFaceValidator {

	@Inject
	IQualifiedNameProvider qnp;
//	@Inject
//	QueryProcessor qp;
	@Inject
	QueryUtilities qu;
	@Inject
	IndexUtilities ndxUtil;

	boolean conditionalsRegistered = false;

	// OCL ocl = null;

	protected static String ISSUE_CODE_PREFIX = "com.epistimis.face.";
	public static String CONSTRAINT_VIOLATION = ISSUE_CODE_PREFIX + "ConstraintViolation";

	@Override
	public EPackage getPackage() {
		return FacePackage.eINSTANCE;
	}
	

	@Override
	protected @NonNull URI getInputURI(@NonNull String localFileName) {
		return getInputURI(localFileName, com.epistimis.face.FaceRuntimeModule.PLUGIN_ID);
	}


	
	@Override
	public void register(EValidatorRegistrar registrar) {
		super.register(registrar);

		/**
		 * Registrations here are for OCL we ALWAYS want available.
		 * These provide foundational rules about the FACE metamodel
		 */	
//		loadOCLAndRegister(registrar,"src/com/epistimis/face/constraints/face.ocl",FacePackage.eINSTANCE, com.epistimis.face.FaceRuntimeModule.PLUGIN_ID);
//		loadOCLAndRegister(registrar, "src/com/epistimis/face/constraints/uop.ocl",FacePackage.eINSTANCE, com.epistimis.face.FaceRuntimeModule.PLUGIN_ID);
//		loadOCLAndRegister(registrar, "src/com/epistimis/face/constraints/integration.ocl",FacePackage.eINSTANCE, com.epistimis.face.FaceRuntimeModule.PLUGIN_ID);

		/**
		 * These will be automatically loaded as needed by other files
		 */
//		loadOCLAndRegister(registrar, "src/com/epistimis/face/constraints/uddlquery.ocl",FacePackage.eINSTANCE, com.epistimis.face.FaceRuntimeModule.PLUGIN_ID);
//		loadOCLAndRegister(registrar,"src/com/epistimis/face/constraints/uopExtensions.ocl",FacePackage.eINSTANCE, com.epistimis.face.FaceRuntimeModule.PLUGIN_ID);
//		loadOCLAndRegister(registrar,"src/com/epistimis/face/constraints/integrationExtensions.ocl",FacePackage.eINSTANCE, com.epistimis.face.FaceRuntimeModule.PLUGIN_ID);
	}





//	/**
//	 * Load an OCL file from the specified URI and register any constraints found
//	 * therein. Note that this loads the entire file so contained operations should
//	 * be visible as well.
//	 * 
//	 * @param ocl The OCL instance associated the ResourceSet we are currently
//	 *            processing
//	 * @param uri The URI of the file to load
//	 * @return A map of constraints. The key is the class name the invariant is
//	 *         associated with.
//	 */
//	protected synchronized Map<String, Set<Constraint>> loadConstraintsFromFile(OCL ocl, URI uri) {
//
//		// parse the contents as an OCL document
//		Resource asResource = ocl.parse(uri);
//		// accumulate the document constraints in constraintMap and print all
//		// constraints
//		Map<String, Set<Constraint>> constraintMap = new HashMap<String, Set<Constraint>>();
//		for (TreeIterator<EObject> tit = asResource.getAllContents(); tit.hasNext();) {
//			EObject next = tit.next();
//			
//			// Operations are functions. Constraints are invariants
//			if (next instanceof Constraint) {
//				Constraint constraint = (Constraint) next;
//				Class container = (Class) next.eContainer();
//				String clzName = container.getName();
//				Set<Constraint> cSet = constraintMap.get(clzName);
//				if (cSet == null) {
//					cSet = new HashSet<Constraint>();
//					constraintMap.put(clzName, cSet);
//				}
//				cSet.add(constraint);
////				ExpressionInOCL expressionInOCL;
////				try {
////					expressionInOCL = ocl.getSpecification(constraint);
////					if (expressionInOCL != null) {
////						String name = constraint.getName();
////						if (name != null) {
////							constraintMap.put(name, expressionInOCL);
////							debugPrintf("%s: %s%n\n", name, expressionInOCL.getOwnedBody());
////						}
////					}
////				} catch (ParserException e) {
////					// TODO Auto-generated catch block
////					e.printStackTrace();
////				}
//			}
//		}
//		return constraintMap;
//	}

	@Override
	protected void augmentRegistry(EPackage.Registry registry) {
		super.augmentRegistry(registry);
		registry.put(FacePackage.eNS_URI, FacePackage.eINSTANCE);
	}

	@Override
	protected EPackage.Registry createMinimalRegistry() {
		EPackage.Registry registry = super.createMinimalRegistry();
		registry.put(FacePackage.eNS_URI, FacePackage.eINSTANCE);
		return registry;
	}



}
