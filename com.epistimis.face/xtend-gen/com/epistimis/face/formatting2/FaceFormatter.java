/**
 * generated by Xtext 2.28.0
 */
package com.epistimis.face.formatting2;

import com.epistimis.face.face.ArchitectureModel;
import com.epistimis.face.face.FacePackage;
import com.epistimis.face.face.IntegrationElement;
import com.epistimis.face.face.IntegrationIntegrationContext;
import com.epistimis.face.face.IntegrationIntegrationModel;
import com.epistimis.face.face.IntegrationTSNodeConnection;
import com.epistimis.face.face.IntegrationTSNodeInputPort;
import com.epistimis.face.face.IntegrationTSNodeOutputPort;
import com.epistimis.face.face.IntegrationTransportNode;
import com.epistimis.face.face.IntegrationUoPInputEndPoint;
import com.epistimis.face.face.IntegrationUoPInstance;
import com.epistimis.face.face.IntegrationUoPOutputEndPoint;
import com.epistimis.face.face.UopClientServerConnection;
import com.epistimis.face.face.UopCompositeTemplate;
import com.epistimis.face.face.UopConnection;
import com.epistimis.face.face.UopElement;
import com.epistimis.face.face.UopQueuingConnection;
import com.epistimis.face.face.UopRAMMemoryRequirements;
import com.epistimis.face.face.UopSingleInstanceMessageConnection;
import com.epistimis.face.face.UopTemplate;
import com.epistimis.face.face.UopThread;
import com.epistimis.face.face.UopUnitOfPortability;
import com.epistimis.face.face.UopUoPModel;
import com.epistimis.uddl.formatting2.UddlFormatter;
import com.epistimis.uddl.uddl.ConceptualAssociation;
import com.epistimis.uddl.uddl.ConceptualComposition;
import com.epistimis.uddl.uddl.ConceptualDataModel;
import com.epistimis.uddl.uddl.ConceptualElement;
import com.epistimis.uddl.uddl.ConceptualEntity;
import com.epistimis.uddl.uddl.ConceptualParticipant;
import com.epistimis.uddl.uddl.DataModel;
import com.epistimis.uddl.uddl.LogicalAssociation;
import com.epistimis.uddl.uddl.LogicalComposition;
import com.epistimis.uddl.uddl.LogicalCoordinateSystem;
import com.epistimis.uddl.uddl.LogicalDataModel;
import com.epistimis.uddl.uddl.LogicalElement;
import com.epistimis.uddl.uddl.LogicalEntity;
import com.epistimis.uddl.uddl.LogicalEnumerated;
import com.epistimis.uddl.uddl.LogicalMeasurementSystem;
import com.epistimis.uddl.uddl.LogicalParticipant;
import com.epistimis.uddl.uddl.LogicalReferencePoint;
import com.epistimis.uddl.uddl.LogicalReferencePointPart;
import com.epistimis.uddl.uddl.LogicalValueTypeUnit;
import com.epistimis.uddl.uddl.PlatformAssociation;
import com.epistimis.uddl.uddl.PlatformComposition;
import com.epistimis.uddl.uddl.PlatformDataModel;
import com.epistimis.uddl.uddl.PlatformDataType;
import com.epistimis.uddl.uddl.PlatformElement;
import com.epistimis.uddl.uddl.PlatformEntity;
import com.epistimis.uddl.uddl.PlatformParticipant;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class FaceFormatter extends UddlFormatter {
  /**
   * Model specific functions
   */
  protected void _format(final ArchitectureModel architectureModel, @Extension final IFormattableDocument document) {
    this.formatContainer(architectureModel, document);
    EList<DataModel> _dm = architectureModel.getDm();
    for (final DataModel dataModel : _dm) {
      document.<DataModel>format(dataModel);
    }
    EList<UopUoPModel> _um = architectureModel.getUm();
    for (final UopUoPModel uopUoPModel : _um) {
      document.<UopUoPModel>format(uopUoPModel);
    }
    EList<IntegrationIntegrationModel> _im = architectureModel.getIm();
    for (final IntegrationIntegrationModel integrationIntegrationModel : _im) {
      document.<IntegrationIntegrationModel>format(integrationIntegrationModel);
    }
  }

  protected void _format(final UopUoPModel uopUoPModel, @Extension final IFormattableDocument document) {
    this.formatContainer(uopUoPModel, document);
    EList<UopUoPModel> _um = uopUoPModel.getUm();
    for (final UopUoPModel _uopUoPModel : _um) {
      document.<UopUoPModel>format(_uopUoPModel);
    }
    EList<UopElement> _element = uopUoPModel.getElement();
    for (final UopElement uopElement : _element) {
      document.<UopElement>format(uopElement);
    }
  }

  /**
   * UoP
   */
  protected void _format(final UopUnitOfPortability obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("lang:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__TRANSPORT_API_LANGUAGE), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("part:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__PARTITION_TYPE), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("prof:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__FACE_PROFILE), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("DAL:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_LEVEL), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("DAS:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_STANDARD), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("support:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__SUPPORTING_COMPONENT), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("conn:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__CONNECTION), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("lcm:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_UNIT_OF_PORTABILITY__LCM_PORT), document);
    EList<EObject> _eContents = obj.eContents();
    for (final EObject contained : _eContents) {
      document.<EObject>format(contained);
    }
    EList<UopConnection> _connection = obj.getConnection();
    for (final EObject elem : _connection) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.<UopUnitOfPortability>surround(obj, _function);
    }
  }

  protected void _format(final UopThread obj, @Extension final IFormattableDocument document) {
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("per:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_THREAD__PERIOD), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("timeCap:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_THREAD__TIME_CAPACITY), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("prio:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_THREAD__RELATIVE_PRIORITY), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("core:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_THREAD__RELATIVE_CORE_AFFINITY), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("thread:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_THREAD__THREAD_TYPE), document);
  }

  protected void _format(final UopRAMMemoryRequirements obj, @Extension final IFormattableDocument document) {
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_RAM_MEMORY_REQUIREMENTS__HEAP_STACK_MIN), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_RAM_MEMORY_REQUIREMENTS__HEAP_STACK_TYPICAL), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_RAM_MEMORY_REQUIREMENTS__HEAP_STACK_MAX), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("text:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_RAM_MEMORY_REQUIREMENTS__TEXT_MAX), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("roData:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_RAM_MEMORY_REQUIREMENTS__RO_DATA_MAX), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("data:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_RAM_MEMORY_REQUIREMENTS__DATA_MAX), document);
    this.formatAttribute(this.textRegionExtensions.regionFor(obj).keyword("bss:"), this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_RAM_MEMORY_REQUIREMENTS__BSS_MAX), document);
  }

  public void formatConnection(final UopConnection obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_CONNECTION__PERIOD), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_CONNECTION__SYNCHRONIZATION_STYLE), document);
  }

  protected void _format(final UopClientServerConnection obj, @Extension final IFormattableDocument document) {
    this.formatConnection(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_CLIENT_SERVER_CONNECTION__ROLE), document);
  }

  protected void _format(final UopQueuingConnection obj, @Extension final IFormattableDocument document) {
    this.formatConnection(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_QUEUING_CONNECTION__DEPTH), document);
  }

  protected void _format(final UopSingleInstanceMessageConnection obj, @Extension final IFormattableDocument document) {
    this.formatConnection(obj, document);
  }

  protected void _format(final UopCompositeTemplate obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<UopCompositeTemplate>prepend(obj, _function);
    this.formatObj(obj, document);
    EList<EObject> _eContents = obj.eContents();
    for (final EObject contained : _eContents) {
      document.<EObject>format(contained);
    }
  }

  protected void _format(final UopTemplate obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_TEMPLATE__BOUND_QUERY), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_TEMPLATE__EFFECTIVE_QUERY), document);
    this.formatAttributeElement(this.textRegionExtensions.regionFor(obj).feature(FacePackage.Literals.UOP_TEMPLATE__SPECIFICATION), document);
  }

  /**
   * Integration
   */
  protected void _format(final IntegrationIntegrationModel obj, @Extension final IFormattableDocument document) {
    this.formatContainer(obj, document);
    EList<IntegrationIntegrationModel> _im = obj.getIm();
    for (final IntegrationIntegrationModel _im_1 : _im) {
      document.<IntegrationIntegrationModel>format(_im_1);
    }
    EList<IntegrationElement> _element = obj.getElement();
    for (final IntegrationElement uopElement : _element) {
      document.<IntegrationElement>format(uopElement);
    }
  }

  protected void _format(final IntegrationIntegrationContext obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    EList<IntegrationTSNodeConnection> _connection = obj.getConnection();
    for (final IntegrationTSNodeConnection c : _connection) {
      {
        document.<IntegrationTSNodeConnection>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<IntegrationTSNodeConnection>append(c, _function);
      }
    }
    EList<IntegrationTransportNode> _node = obj.getNode();
    for (final IntegrationTransportNode c_1 : _node) {
      {
        document.<IntegrationTransportNode>format(c_1);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<IntegrationTransportNode>append(c_1, _function);
      }
    }
  }

  protected void _format(final IntegrationUoPInstance obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    EList<IntegrationUoPInputEndPoint> _input = obj.getInput();
    for (final IntegrationUoPInputEndPoint c : _input) {
      {
        document.<IntegrationUoPInputEndPoint>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<IntegrationUoPInputEndPoint>append(c, _function);
      }
    }
    EList<IntegrationUoPOutputEndPoint> _output = obj.getOutput();
    for (final IntegrationUoPOutputEndPoint c_1 : _output) {
      {
        document.<IntegrationUoPOutputEndPoint>format(c_1);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<IntegrationUoPOutputEndPoint>append(c_1, _function);
      }
    }
  }

  protected void _format(final IntegrationTransportNode obj, @Extension final IFormattableDocument document) {
    this.formatObj(obj, document);
    EList<IntegrationTSNodeInputPort> _inPort = obj.getInPort();
    for (final IntegrationTSNodeInputPort c : _inPort) {
      {
        document.<IntegrationTSNodeInputPort>format(c);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(1, 1, 2);
        };
        document.<IntegrationTSNodeInputPort>append(c, _function);
      }
    }
    document.<IntegrationTSNodeOutputPort>format(obj.getOutPort());
  }

  public void format(final Object obj, final IFormattableDocument document) {
    if (obj instanceof ConceptualAssociation) {
      _format((ConceptualAssociation)obj, document);
      return;
    } else if (obj instanceof LogicalAssociation) {
      _format((LogicalAssociation)obj, document);
      return;
    } else if (obj instanceof LogicalEnumerated) {
      _format((LogicalEnumerated)obj, document);
      return;
    } else if (obj instanceof PlatformAssociation) {
      _format((PlatformAssociation)obj, document);
      return;
    } else if (obj instanceof UopCompositeTemplate) {
      _format((UopCompositeTemplate)obj, document);
      return;
    } else if (obj instanceof UopTemplate) {
      _format((UopTemplate)obj, document);
      return;
    } else if (obj instanceof ConceptualEntity) {
      _format((ConceptualEntity)obj, document);
      return;
    } else if (obj instanceof LogicalEntity) {
      _format((LogicalEntity)obj, document);
      return;
    } else if (obj instanceof LogicalMeasurementSystem) {
      _format((LogicalMeasurementSystem)obj, document);
      return;
    } else if (obj instanceof PlatformDataType) {
      _format((PlatformDataType)obj, document);
      return;
    } else if (obj instanceof PlatformEntity) {
      _format((PlatformEntity)obj, document);
      return;
    } else if (obj instanceof IntegrationIntegrationContext) {
      _format((IntegrationIntegrationContext)obj, document);
      return;
    } else if (obj instanceof IntegrationUoPInstance) {
      _format((IntegrationUoPInstance)obj, document);
      return;
    } else if (obj instanceof UopQueuingConnection) {
      _format((UopQueuingConnection)obj, document);
      return;
    } else if (obj instanceof UopSingleInstanceMessageConnection) {
      _format((UopSingleInstanceMessageConnection)obj, document);
      return;
    } else if (obj instanceof UopUnitOfPortability) {
      _format((UopUnitOfPortability)obj, document);
      return;
    } else if (obj instanceof LogicalCoordinateSystem) {
      _format((LogicalCoordinateSystem)obj, document);
      return;
    } else if (obj instanceof LogicalValueTypeUnit) {
      _format((LogicalValueTypeUnit)obj, document);
      return;
    } else if (obj instanceof XtextResource) {
      _format((XtextResource)obj, document);
      return;
    } else if (obj instanceof ArchitectureModel) {
      _format((ArchitectureModel)obj, document);
      return;
    } else if (obj instanceof IntegrationIntegrationModel) {
      _format((IntegrationIntegrationModel)obj, document);
      return;
    } else if (obj instanceof IntegrationTransportNode) {
      _format((IntegrationTransportNode)obj, document);
      return;
    } else if (obj instanceof UopClientServerConnection) {
      _format((UopClientServerConnection)obj, document);
      return;
    } else if (obj instanceof UopUoPModel) {
      _format((UopUoPModel)obj, document);
      return;
    } else if (obj instanceof ConceptualComposition) {
      _format((ConceptualComposition)obj, document);
      return;
    } else if (obj instanceof ConceptualDataModel) {
      _format((ConceptualDataModel)obj, document);
      return;
    } else if (obj instanceof ConceptualElement) {
      _format((ConceptualElement)obj, document);
      return;
    } else if (obj instanceof ConceptualParticipant) {
      _format((ConceptualParticipant)obj, document);
      return;
    } else if (obj instanceof DataModel) {
      _format((DataModel)obj, document);
      return;
    } else if (obj instanceof LogicalComposition) {
      _format((LogicalComposition)obj, document);
      return;
    } else if (obj instanceof LogicalDataModel) {
      _format((LogicalDataModel)obj, document);
      return;
    } else if (obj instanceof LogicalElement) {
      _format((LogicalElement)obj, document);
      return;
    } else if (obj instanceof LogicalParticipant) {
      _format((LogicalParticipant)obj, document);
      return;
    } else if (obj instanceof LogicalReferencePoint) {
      _format((LogicalReferencePoint)obj, document);
      return;
    } else if (obj instanceof PlatformComposition) {
      _format((PlatformComposition)obj, document);
      return;
    } else if (obj instanceof PlatformDataModel) {
      _format((PlatformDataModel)obj, document);
      return;
    } else if (obj instanceof PlatformElement) {
      _format((PlatformElement)obj, document);
      return;
    } else if (obj instanceof PlatformParticipant) {
      _format((PlatformParticipant)obj, document);
      return;
    } else if (obj instanceof UopRAMMemoryRequirements) {
      _format((UopRAMMemoryRequirements)obj, document);
      return;
    } else if (obj instanceof UopThread) {
      _format((UopThread)obj, document);
      return;
    } else if (obj instanceof LogicalReferencePointPart) {
      _format((LogicalReferencePointPart)obj, document);
      return;
    } else if (obj instanceof EObject) {
      _format((EObject)obj, document);
      return;
    } else if (obj == null) {
      _format((Void)null, document);
      return;
    } else if (obj != null) {
      _format(obj, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(obj, document).toString());
    }
  }
}
