/**
 * generated by Xtext 2.30.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.face.face.util;

import com.epistimis.face.face.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.epistimis.face.face.FacePackage
 * @generated
 */
public class FaceAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FacePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FaceAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FacePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FaceSwitch<Adapter> modelSwitch =
    new FaceSwitch<Adapter>()
    {
      @Override
      public Adapter caseArchitectureModel(ArchitectureModel object)
      {
        return createArchitectureModelAdapter();
      }
      @Override
      public Adapter caseFaceElement(FaceElement object)
      {
        return createFaceElementAdapter();
      }
      @Override
      public Adapter caseUopUoPModel(UopUoPModel object)
      {
        return createUopUoPModelAdapter();
      }
      @Override
      public Adapter caseUopElement(UopElement object)
      {
        return createUopElementAdapter();
      }
      @Override
      public Adapter caseUopSupportingComponent(UopSupportingComponent object)
      {
        return createUopSupportingComponentAdapter();
      }
      @Override
      public Adapter caseUopLanguageRuntime(UopLanguageRuntime object)
      {
        return createUopLanguageRuntimeAdapter();
      }
      @Override
      public Adapter caseUopComponentFramework(UopComponentFramework object)
      {
        return createUopComponentFrameworkAdapter();
      }
      @Override
      public Adapter caseUopAbstractUoP(UopAbstractUoP object)
      {
        return createUopAbstractUoPAdapter();
      }
      @Override
      public Adapter caseUopAbstractConnection(UopAbstractConnection object)
      {
        return createUopAbstractConnectionAdapter();
      }
      @Override
      public Adapter caseUopUnitOfPortability(UopUnitOfPortability object)
      {
        return createUopUnitOfPortabilityAdapter();
      }
      @Override
      public Adapter caseUopPortableComponent(UopPortableComponent object)
      {
        return createUopPortableComponentAdapter();
      }
      @Override
      public Adapter caseUopPlatformSpecificComponent(UopPlatformSpecificComponent object)
      {
        return createUopPlatformSpecificComponentAdapter();
      }
      @Override
      public Adapter caseUopThread(UopThread object)
      {
        return createUopThreadAdapter();
      }
      @Override
      public Adapter caseUopRAMMemoryRequirements(UopRAMMemoryRequirements object)
      {
        return createUopRAMMemoryRequirementsAdapter();
      }
      @Override
      public Adapter caseUopConnection(UopConnection object)
      {
        return createUopConnectionAdapter();
      }
      @Override
      public Adapter caseUopClientServerConnection(UopClientServerConnection object)
      {
        return createUopClientServerConnectionAdapter();
      }
      @Override
      public Adapter caseUopPubSubConnection(UopPubSubConnection object)
      {
        return createUopPubSubConnectionAdapter();
      }
      @Override
      public Adapter caseUopQueuingConnection(UopQueuingConnection object)
      {
        return createUopQueuingConnectionAdapter();
      }
      @Override
      public Adapter caseUopSingleInstanceMessageConnection(UopSingleInstanceMessageConnection object)
      {
        return createUopSingleInstanceMessageConnectionAdapter();
      }
      @Override
      public Adapter caseUopLifeCycleManagementPort(UopLifeCycleManagementPort object)
      {
        return createUopLifeCycleManagementPortAdapter();
      }
      @Override
      public Adapter caseUopMessageType(UopMessageType object)
      {
        return createUopMessageTypeAdapter();
      }
      @Override
      public Adapter caseUopCompositeTemplate(UopCompositeTemplate object)
      {
        return createUopCompositeTemplateAdapter();
      }
      @Override
      public Adapter caseUopTemplateComposition(UopTemplateComposition object)
      {
        return createUopTemplateCompositionAdapter();
      }
      @Override
      public Adapter caseUopTemplate(UopTemplate object)
      {
        return createUopTemplateAdapter();
      }
      @Override
      public Adapter caseIntegrationIntegrationModel(IntegrationIntegrationModel object)
      {
        return createIntegrationIntegrationModelAdapter();
      }
      @Override
      public Adapter caseIntegrationElement(IntegrationElement object)
      {
        return createIntegrationElementAdapter();
      }
      @Override
      public Adapter caseIntegrationIntegrationContext(IntegrationIntegrationContext object)
      {
        return createIntegrationIntegrationContextAdapter();
      }
      @Override
      public Adapter caseIntegrationTSNodeConnection(IntegrationTSNodeConnection object)
      {
        return createIntegrationTSNodeConnectionAdapter();
      }
      @Override
      public Adapter caseIntegrationTSNodePortBase(IntegrationTSNodePortBase object)
      {
        return createIntegrationTSNodePortBaseAdapter();
      }
      @Override
      public Adapter caseIntegrationUoPInstance(IntegrationUoPInstance object)
      {
        return createIntegrationUoPInstanceAdapter();
      }
      @Override
      public Adapter caseIntegrationUoPInputEndPoint(IntegrationUoPInputEndPoint object)
      {
        return createIntegrationUoPInputEndPointAdapter();
      }
      @Override
      public Adapter caseIntegrationUoPOutputEndPoint(IntegrationUoPOutputEndPoint object)
      {
        return createIntegrationUoPOutputEndPointAdapter();
      }
      @Override
      public Adapter caseIntegrationTransportNode(IntegrationTransportNode object)
      {
        return createIntegrationTransportNodeAdapter();
      }
      @Override
      public Adapter caseIntegrationTSNodeInputPort(IntegrationTSNodeInputPort object)
      {
        return createIntegrationTSNodeInputPortAdapter();
      }
      @Override
      public Adapter caseIntegrationTSNodeOutputPort(IntegrationTSNodeOutputPort object)
      {
        return createIntegrationTSNodeOutputPortAdapter();
      }
      @Override
      public Adapter caseIntegrationViewAggregation(IntegrationViewAggregation object)
      {
        return createIntegrationViewAggregationAdapter();
      }
      @Override
      public Adapter caseIntegrationViewFilter(IntegrationViewFilter object)
      {
        return createIntegrationViewFilterAdapter();
      }
      @Override
      public Adapter caseIntegrationViewSource(IntegrationViewSource object)
      {
        return createIntegrationViewSourceAdapter();
      }
      @Override
      public Adapter caseIntegrationViewSink(IntegrationViewSink object)
      {
        return createIntegrationViewSinkAdapter();
      }
      @Override
      public Adapter caseIntegrationViewTransformation(IntegrationViewTransformation object)
      {
        return createIntegrationViewTransformationAdapter();
      }
      @Override
      public Adapter caseIntegrationViewTransporter(IntegrationViewTransporter object)
      {
        return createIntegrationViewTransporterAdapter();
      }
      @Override
      public Adapter caseIntegrationTransportChannel(IntegrationTransportChannel object)
      {
        return createIntegrationTransportChannelAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.ArchitectureModel <em>Architecture Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.ArchitectureModel
   * @generated
   */
  public Adapter createArchitectureModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.FaceElement <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.FaceElement
   * @generated
   */
  public Adapter createFaceElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopUoPModel <em>Uop Uo PModel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopUoPModel
   * @generated
   */
  public Adapter createUopUoPModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopElement <em>Uop Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopElement
   * @generated
   */
  public Adapter createUopElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopSupportingComponent <em>Uop Supporting Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopSupportingComponent
   * @generated
   */
  public Adapter createUopSupportingComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopLanguageRuntime <em>Uop Language Runtime</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopLanguageRuntime
   * @generated
   */
  public Adapter createUopLanguageRuntimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopComponentFramework <em>Uop Component Framework</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopComponentFramework
   * @generated
   */
  public Adapter createUopComponentFrameworkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopAbstractUoP <em>Uop Abstract Uo P</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopAbstractUoP
   * @generated
   */
  public Adapter createUopAbstractUoPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopAbstractConnection <em>Uop Abstract Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopAbstractConnection
   * @generated
   */
  public Adapter createUopAbstractConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopUnitOfPortability <em>Uop Unit Of Portability</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopUnitOfPortability
   * @generated
   */
  public Adapter createUopUnitOfPortabilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopPortableComponent <em>Uop Portable Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopPortableComponent
   * @generated
   */
  public Adapter createUopPortableComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopPlatformSpecificComponent <em>Uop Platform Specific Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopPlatformSpecificComponent
   * @generated
   */
  public Adapter createUopPlatformSpecificComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopThread <em>Uop Thread</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopThread
   * @generated
   */
  public Adapter createUopThreadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopRAMMemoryRequirements <em>Uop RAM Memory Requirements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopRAMMemoryRequirements
   * @generated
   */
  public Adapter createUopRAMMemoryRequirementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopConnection <em>Uop Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopConnection
   * @generated
   */
  public Adapter createUopConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopClientServerConnection <em>Uop Client Server Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopClientServerConnection
   * @generated
   */
  public Adapter createUopClientServerConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopPubSubConnection <em>Uop Pub Sub Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopPubSubConnection
   * @generated
   */
  public Adapter createUopPubSubConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopQueuingConnection <em>Uop Queuing Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopQueuingConnection
   * @generated
   */
  public Adapter createUopQueuingConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopSingleInstanceMessageConnection <em>Uop Single Instance Message Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopSingleInstanceMessageConnection
   * @generated
   */
  public Adapter createUopSingleInstanceMessageConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopLifeCycleManagementPort <em>Uop Life Cycle Management Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopLifeCycleManagementPort
   * @generated
   */
  public Adapter createUopLifeCycleManagementPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopMessageType <em>Uop Message Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopMessageType
   * @generated
   */
  public Adapter createUopMessageTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopCompositeTemplate <em>Uop Composite Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopCompositeTemplate
   * @generated
   */
  public Adapter createUopCompositeTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopTemplateComposition <em>Uop Template Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopTemplateComposition
   * @generated
   */
  public Adapter createUopTemplateCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.UopTemplate <em>Uop Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.UopTemplate
   * @generated
   */
  public Adapter createUopTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationIntegrationModel <em>Integration Integration Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationIntegrationModel
   * @generated
   */
  public Adapter createIntegrationIntegrationModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationElement <em>Integration Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationElement
   * @generated
   */
  public Adapter createIntegrationElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationIntegrationContext <em>Integration Integration Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationIntegrationContext
   * @generated
   */
  public Adapter createIntegrationIntegrationContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationTSNodeConnection <em>Integration TS Node Connection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationTSNodeConnection
   * @generated
   */
  public Adapter createIntegrationTSNodeConnectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationTSNodePortBase <em>Integration TS Node Port Base</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationTSNodePortBase
   * @generated
   */
  public Adapter createIntegrationTSNodePortBaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationUoPInstance <em>Integration Uo PInstance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationUoPInstance
   * @generated
   */
  public Adapter createIntegrationUoPInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationUoPInputEndPoint <em>Integration Uo PInput End Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationUoPInputEndPoint
   * @generated
   */
  public Adapter createIntegrationUoPInputEndPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationUoPOutputEndPoint <em>Integration Uo POutput End Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationUoPOutputEndPoint
   * @generated
   */
  public Adapter createIntegrationUoPOutputEndPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationTransportNode <em>Integration Transport Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationTransportNode
   * @generated
   */
  public Adapter createIntegrationTransportNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationTSNodeInputPort <em>Integration TS Node Input Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationTSNodeInputPort
   * @generated
   */
  public Adapter createIntegrationTSNodeInputPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationTSNodeOutputPort <em>Integration TS Node Output Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationTSNodeOutputPort
   * @generated
   */
  public Adapter createIntegrationTSNodeOutputPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationViewAggregation <em>Integration View Aggregation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationViewAggregation
   * @generated
   */
  public Adapter createIntegrationViewAggregationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationViewFilter <em>Integration View Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationViewFilter
   * @generated
   */
  public Adapter createIntegrationViewFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationViewSource <em>Integration View Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationViewSource
   * @generated
   */
  public Adapter createIntegrationViewSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationViewSink <em>Integration View Sink</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationViewSink
   * @generated
   */
  public Adapter createIntegrationViewSinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationViewTransformation <em>Integration View Transformation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationViewTransformation
   * @generated
   */
  public Adapter createIntegrationViewTransformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationViewTransporter <em>Integration View Transporter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationViewTransporter
   * @generated
   */
  public Adapter createIntegrationViewTransporterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.face.face.IntegrationTransportChannel <em>Integration Transport Channel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.face.face.IntegrationTransportChannel
   * @generated
   */
  public Adapter createIntegrationTransportChannelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FaceAdapterFactory
