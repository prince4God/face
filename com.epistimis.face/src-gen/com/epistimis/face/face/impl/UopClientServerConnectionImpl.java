/**
 * generated by Xtext 2.30.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.face.face.impl;

import com.epistimis.face.face.FacePackage;
import com.epistimis.face.face.UoPClientServerRole;
import com.epistimis.face.face.UopClientServerConnection;
import com.epistimis.face.face.UopMessageType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Uop Client Server Connection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.face.face.impl.UopClientServerConnectionImpl#getRequestType <em>Request Type</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopClientServerConnectionImpl#getResponseType <em>Response Type</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopClientServerConnectionImpl#getRole <em>Role</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UopClientServerConnectionImpl extends UopConnectionImpl implements UopClientServerConnection
{
  /**
   * The cached value of the '{@link #getRequestType() <em>Request Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequestType()
   * @generated
   * @ordered
   */
  protected UopMessageType requestType;

  /**
   * The cached value of the '{@link #getResponseType() <em>Response Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResponseType()
   * @generated
   * @ordered
   */
  protected UopMessageType responseType;

  /**
   * The default value of the '{@link #getRole() <em>Role</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRole()
   * @generated
   * @ordered
   */
  protected static final UoPClientServerRole ROLE_EDEFAULT = UoPClientServerRole.CLIENT;

  /**
   * The cached value of the '{@link #getRole() <em>Role</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRole()
   * @generated
   * @ordered
   */
  protected UoPClientServerRole role = ROLE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UopClientServerConnectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FacePackage.Literals.UOP_CLIENT_SERVER_CONNECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopMessageType getRequestType()
  {
    if (requestType != null && requestType.eIsProxy())
    {
      InternalEObject oldRequestType = (InternalEObject)requestType;
      requestType = (UopMessageType)eResolveProxy(oldRequestType);
      if (requestType != oldRequestType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FacePackage.UOP_CLIENT_SERVER_CONNECTION__REQUEST_TYPE, oldRequestType, requestType));
      }
    }
    return requestType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UopMessageType basicGetRequestType()
  {
    return requestType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRequestType(UopMessageType newRequestType)
  {
    UopMessageType oldRequestType = requestType;
    requestType = newRequestType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_CLIENT_SERVER_CONNECTION__REQUEST_TYPE, oldRequestType, requestType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopMessageType getResponseType()
  {
    if (responseType != null && responseType.eIsProxy())
    {
      InternalEObject oldResponseType = (InternalEObject)responseType;
      responseType = (UopMessageType)eResolveProxy(oldResponseType);
      if (responseType != oldResponseType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FacePackage.UOP_CLIENT_SERVER_CONNECTION__RESPONSE_TYPE, oldResponseType, responseType));
      }
    }
    return responseType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UopMessageType basicGetResponseType()
  {
    return responseType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setResponseType(UopMessageType newResponseType)
  {
    UopMessageType oldResponseType = responseType;
    responseType = newResponseType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_CLIENT_SERVER_CONNECTION__RESPONSE_TYPE, oldResponseType, responseType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UoPClientServerRole getRole()
  {
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRole(UoPClientServerRole newRole)
  {
    UoPClientServerRole oldRole = role;
    role = newRole == null ? ROLE_EDEFAULT : newRole;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_CLIENT_SERVER_CONNECTION__ROLE, oldRole, role));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__REQUEST_TYPE:
        if (resolve) return getRequestType();
        return basicGetRequestType();
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__RESPONSE_TYPE:
        if (resolve) return getResponseType();
        return basicGetResponseType();
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__ROLE:
        return getRole();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__REQUEST_TYPE:
        setRequestType((UopMessageType)newValue);
        return;
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__RESPONSE_TYPE:
        setResponseType((UopMessageType)newValue);
        return;
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__ROLE:
        setRole((UoPClientServerRole)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__REQUEST_TYPE:
        setRequestType((UopMessageType)null);
        return;
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__RESPONSE_TYPE:
        setResponseType((UopMessageType)null);
        return;
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__ROLE:
        setRole(ROLE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__REQUEST_TYPE:
        return requestType != null;
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__RESPONSE_TYPE:
        return responseType != null;
      case FacePackage.UOP_CLIENT_SERVER_CONNECTION__ROLE:
        return role != ROLE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (role: ");
    result.append(role);
    result.append(')');
    return result.toString();
  }

} //UopClientServerConnectionImpl
