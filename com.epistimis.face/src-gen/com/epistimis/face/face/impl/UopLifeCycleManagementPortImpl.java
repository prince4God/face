/**
 * generated by Xtext 2.30.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.face.face.impl;

import com.epistimis.face.face.FacePackage;
import com.epistimis.face.face.UopLifeCycleManagementPort;
import com.epistimis.face.face.UopMessageExchangeType;
import com.epistimis.face.face.UopMessageType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Uop Life Cycle Management Port</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.face.face.impl.UopLifeCycleManagementPortImpl#getMessageExchangeType <em>Message Exchange Type</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopLifeCycleManagementPortImpl#getLcmMessageType <em>Lcm Message Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UopLifeCycleManagementPortImpl extends MinimalEObjectImpl.Container implements UopLifeCycleManagementPort
{
  /**
   * The default value of the '{@link #getMessageExchangeType() <em>Message Exchange Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessageExchangeType()
   * @generated
   * @ordered
   */
  protected static final UopMessageExchangeType MESSAGE_EXCHANGE_TYPE_EDEFAULT = UopMessageExchangeType.INBOUND_MESSAGE;

  /**
   * The cached value of the '{@link #getMessageExchangeType() <em>Message Exchange Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessageExchangeType()
   * @generated
   * @ordered
   */
  protected UopMessageExchangeType messageExchangeType = MESSAGE_EXCHANGE_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getLcmMessageType() <em>Lcm Message Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLcmMessageType()
   * @generated
   * @ordered
   */
  protected UopMessageType lcmMessageType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UopLifeCycleManagementPortImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FacePackage.Literals.UOP_LIFE_CYCLE_MANAGEMENT_PORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopMessageExchangeType getMessageExchangeType()
  {
    return messageExchangeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMessageExchangeType(UopMessageExchangeType newMessageExchangeType)
  {
    UopMessageExchangeType oldMessageExchangeType = messageExchangeType;
    messageExchangeType = newMessageExchangeType == null ? MESSAGE_EXCHANGE_TYPE_EDEFAULT : newMessageExchangeType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__MESSAGE_EXCHANGE_TYPE, oldMessageExchangeType, messageExchangeType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopMessageType getLcmMessageType()
  {
    if (lcmMessageType != null && lcmMessageType.eIsProxy())
    {
      InternalEObject oldLcmMessageType = (InternalEObject)lcmMessageType;
      lcmMessageType = (UopMessageType)eResolveProxy(oldLcmMessageType);
      if (lcmMessageType != oldLcmMessageType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__LCM_MESSAGE_TYPE, oldLcmMessageType, lcmMessageType));
      }
    }
    return lcmMessageType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UopMessageType basicGetLcmMessageType()
  {
    return lcmMessageType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLcmMessageType(UopMessageType newLcmMessageType)
  {
    UopMessageType oldLcmMessageType = lcmMessageType;
    lcmMessageType = newLcmMessageType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__LCM_MESSAGE_TYPE, oldLcmMessageType, lcmMessageType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__MESSAGE_EXCHANGE_TYPE:
        return getMessageExchangeType();
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__LCM_MESSAGE_TYPE:
        if (resolve) return getLcmMessageType();
        return basicGetLcmMessageType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__MESSAGE_EXCHANGE_TYPE:
        setMessageExchangeType((UopMessageExchangeType)newValue);
        return;
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__LCM_MESSAGE_TYPE:
        setLcmMessageType((UopMessageType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__MESSAGE_EXCHANGE_TYPE:
        setMessageExchangeType(MESSAGE_EXCHANGE_TYPE_EDEFAULT);
        return;
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__LCM_MESSAGE_TYPE:
        setLcmMessageType((UopMessageType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__MESSAGE_EXCHANGE_TYPE:
        return messageExchangeType != MESSAGE_EXCHANGE_TYPE_EDEFAULT;
      case FacePackage.UOP_LIFE_CYCLE_MANAGEMENT_PORT__LCM_MESSAGE_TYPE:
        return lcmMessageType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (messageExchangeType: ");
    result.append(messageExchangeType);
    result.append(')');
    return result.toString();
  }

} //UopLifeCycleManagementPortImpl
