/**
 * generated by Xtext 2.30.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.face.face.impl;

import com.epistimis.face.face.FacePackage;
import com.epistimis.face.face.UopTemplate;

import com.epistimis.uddl.uddl.PlatformQuery;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Uop Template</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.face.face.impl.UopTemplateImpl#getSpecification <em>Specification</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopTemplateImpl#getBoundQuery <em>Bound Query</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopTemplateImpl#getEffectiveQuery <em>Effective Query</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UopTemplateImpl extends UopMessageTypeImpl implements UopTemplate
{
  /**
   * The default value of the '{@link #getSpecification() <em>Specification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecification()
   * @generated
   * @ordered
   */
  protected static final String SPECIFICATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpecification() <em>Specification</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecification()
   * @generated
   * @ordered
   */
  protected String specification = SPECIFICATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getBoundQuery() <em>Bound Query</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoundQuery()
   * @generated
   * @ordered
   */
  protected PlatformQuery boundQuery;

  /**
   * The cached value of the '{@link #getEffectiveQuery() <em>Effective Query</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffectiveQuery()
   * @generated
   * @ordered
   */
  protected PlatformQuery effectiveQuery;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UopTemplateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FacePackage.Literals.UOP_TEMPLATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSpecification()
  {
    return specification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpecification(String newSpecification)
  {
    String oldSpecification = specification;
    specification = newSpecification;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_TEMPLATE__SPECIFICATION, oldSpecification, specification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlatformQuery getBoundQuery()
  {
    if (boundQuery != null && boundQuery.eIsProxy())
    {
      InternalEObject oldBoundQuery = (InternalEObject)boundQuery;
      boundQuery = (PlatformQuery)eResolveProxy(oldBoundQuery);
      if (boundQuery != oldBoundQuery)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FacePackage.UOP_TEMPLATE__BOUND_QUERY, oldBoundQuery, boundQuery));
      }
    }
    return boundQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlatformQuery basicGetBoundQuery()
  {
    return boundQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoundQuery(PlatformQuery newBoundQuery)
  {
    PlatformQuery oldBoundQuery = boundQuery;
    boundQuery = newBoundQuery;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_TEMPLATE__BOUND_QUERY, oldBoundQuery, boundQuery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlatformQuery getEffectiveQuery()
  {
    if (effectiveQuery != null && effectiveQuery.eIsProxy())
    {
      InternalEObject oldEffectiveQuery = (InternalEObject)effectiveQuery;
      effectiveQuery = (PlatformQuery)eResolveProxy(oldEffectiveQuery);
      if (effectiveQuery != oldEffectiveQuery)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FacePackage.UOP_TEMPLATE__EFFECTIVE_QUERY, oldEffectiveQuery, effectiveQuery));
      }
    }
    return effectiveQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlatformQuery basicGetEffectiveQuery()
  {
    return effectiveQuery;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEffectiveQuery(PlatformQuery newEffectiveQuery)
  {
    PlatformQuery oldEffectiveQuery = effectiveQuery;
    effectiveQuery = newEffectiveQuery;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_TEMPLATE__EFFECTIVE_QUERY, oldEffectiveQuery, effectiveQuery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FacePackage.UOP_TEMPLATE__SPECIFICATION:
        return getSpecification();
      case FacePackage.UOP_TEMPLATE__BOUND_QUERY:
        if (resolve) return getBoundQuery();
        return basicGetBoundQuery();
      case FacePackage.UOP_TEMPLATE__EFFECTIVE_QUERY:
        if (resolve) return getEffectiveQuery();
        return basicGetEffectiveQuery();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FacePackage.UOP_TEMPLATE__SPECIFICATION:
        setSpecification((String)newValue);
        return;
      case FacePackage.UOP_TEMPLATE__BOUND_QUERY:
        setBoundQuery((PlatformQuery)newValue);
        return;
      case FacePackage.UOP_TEMPLATE__EFFECTIVE_QUERY:
        setEffectiveQuery((PlatformQuery)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_TEMPLATE__SPECIFICATION:
        setSpecification(SPECIFICATION_EDEFAULT);
        return;
      case FacePackage.UOP_TEMPLATE__BOUND_QUERY:
        setBoundQuery((PlatformQuery)null);
        return;
      case FacePackage.UOP_TEMPLATE__EFFECTIVE_QUERY:
        setEffectiveQuery((PlatformQuery)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_TEMPLATE__SPECIFICATION:
        return SPECIFICATION_EDEFAULT == null ? specification != null : !SPECIFICATION_EDEFAULT.equals(specification);
      case FacePackage.UOP_TEMPLATE__BOUND_QUERY:
        return boundQuery != null;
      case FacePackage.UOP_TEMPLATE__EFFECTIVE_QUERY:
        return effectiveQuery != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (specification: ");
    result.append(specification);
    result.append(')');
    return result.toString();
  }

} //UopTemplateImpl
