/**
 * generated by Xtext 2.30.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.face.face.impl;

import com.epistimis.face.face.FacePackage;
import com.epistimis.face.face.IntegrationIntegrationContext;
import com.epistimis.face.face.UopAbstractUoP;
import com.epistimis.face.face.UopConnection;
import com.epistimis.face.face.UopDesignAssuranceLevel;
import com.epistimis.face.face.UopDesignAssuranceStandard;
import com.epistimis.face.face.UopFaceProfile;
import com.epistimis.face.face.UopLifeCycleManagementPort;
import com.epistimis.face.face.UopPartitionType;
import com.epistimis.face.face.UopProgrammingLanguage;
import com.epistimis.face.face.UopRAMMemoryRequirements;
import com.epistimis.face.face.UopSupportingComponent;
import com.epistimis.face.face.UopThread;
import com.epistimis.face.face.UopUnitOfPortability;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Uop Unit Of Portability</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getRealizes <em>Realizes</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getTransportAPILanguage <em>Transport API Language</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getPartitionType <em>Partition Type</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getFaceProfile <em>Face Profile</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getDesignAssuranceLevel <em>Design Assurance Level</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getDesignAssuranceStandard <em>Design Assurance Standard</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getMemoryRequirements <em>Memory Requirements</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getThread <em>Thread</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getSupportingComponent <em>Supporting Component</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getConnection <em>Connection</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getLcmPort <em>Lcm Port</em>}</li>
 *   <li>{@link com.epistimis.face.face.impl.UopUnitOfPortabilityImpl#getImplementedBy <em>Implemented By</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UopUnitOfPortabilityImpl extends UopElementImpl implements UopUnitOfPortability
{
  /**
   * The cached value of the '{@link #getRealizes() <em>Realizes</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRealizes()
   * @generated
   * @ordered
   */
  protected UopAbstractUoP realizes;

  /**
   * The default value of the '{@link #getTransportAPILanguage() <em>Transport API Language</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransportAPILanguage()
   * @generated
   * @ordered
   */
  protected static final UopProgrammingLanguage TRANSPORT_API_LANGUAGE_EDEFAULT = UopProgrammingLanguage.UNSPECIFIED;

  /**
   * The cached value of the '{@link #getTransportAPILanguage() <em>Transport API Language</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransportAPILanguage()
   * @generated
   * @ordered
   */
  protected UopProgrammingLanguage transportAPILanguage = TRANSPORT_API_LANGUAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getPartitionType() <em>Partition Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPartitionType()
   * @generated
   * @ordered
   */
  protected static final UopPartitionType PARTITION_TYPE_EDEFAULT = UopPartitionType.POSIX;

  /**
   * The cached value of the '{@link #getPartitionType() <em>Partition Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPartitionType()
   * @generated
   * @ordered
   */
  protected UopPartitionType partitionType = PARTITION_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getFaceProfile() <em>Face Profile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaceProfile()
   * @generated
   * @ordered
   */
  protected static final UopFaceProfile FACE_PROFILE_EDEFAULT = UopFaceProfile.GENERAL_PURPOSE;

  /**
   * The cached value of the '{@link #getFaceProfile() <em>Face Profile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaceProfile()
   * @generated
   * @ordered
   */
  protected UopFaceProfile faceProfile = FACE_PROFILE_EDEFAULT;

  /**
   * The default value of the '{@link #getDesignAssuranceLevel() <em>Design Assurance Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesignAssuranceLevel()
   * @generated
   * @ordered
   */
  protected static final UopDesignAssuranceLevel DESIGN_ASSURANCE_LEVEL_EDEFAULT = UopDesignAssuranceLevel.A;

  /**
   * The cached value of the '{@link #getDesignAssuranceLevel() <em>Design Assurance Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesignAssuranceLevel()
   * @generated
   * @ordered
   */
  protected UopDesignAssuranceLevel designAssuranceLevel = DESIGN_ASSURANCE_LEVEL_EDEFAULT;

  /**
   * The default value of the '{@link #getDesignAssuranceStandard() <em>Design Assurance Standard</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesignAssuranceStandard()
   * @generated
   * @ordered
   */
  protected static final UopDesignAssuranceStandard DESIGN_ASSURANCE_STANDARD_EDEFAULT = UopDesignAssuranceStandard.DO_178B_ED_12B;

  /**
   * The cached value of the '{@link #getDesignAssuranceStandard() <em>Design Assurance Standard</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesignAssuranceStandard()
   * @generated
   * @ordered
   */
  protected UopDesignAssuranceStandard designAssuranceStandard = DESIGN_ASSURANCE_STANDARD_EDEFAULT;

  /**
   * The cached value of the '{@link #getMemoryRequirements() <em>Memory Requirements</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemoryRequirements()
   * @generated
   * @ordered
   */
  protected UopRAMMemoryRequirements memoryRequirements;

  /**
   * The cached value of the '{@link #getThread() <em>Thread</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThread()
   * @generated
   * @ordered
   */
  protected EList<UopThread> thread;

  /**
   * The cached value of the '{@link #getSupportingComponent() <em>Supporting Component</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSupportingComponent()
   * @generated
   * @ordered
   */
  protected EList<UopSupportingComponent> supportingComponent;

  /**
   * The cached value of the '{@link #getConnection() <em>Connection</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnection()
   * @generated
   * @ordered
   */
  protected EList<UopConnection> connection;

  /**
   * The cached value of the '{@link #getLcmPort() <em>Lcm Port</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLcmPort()
   * @generated
   * @ordered
   */
  protected EList<UopLifeCycleManagementPort> lcmPort;

  /**
   * The cached value of the '{@link #getImplementedBy() <em>Implemented By</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementedBy()
   * @generated
   * @ordered
   */
  protected IntegrationIntegrationContext implementedBy;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UopUnitOfPortabilityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FacePackage.Literals.UOP_UNIT_OF_PORTABILITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopAbstractUoP getRealizes()
  {
    if (realizes != null && realizes.eIsProxy())
    {
      InternalEObject oldRealizes = (InternalEObject)realizes;
      realizes = (UopAbstractUoP)eResolveProxy(oldRealizes);
      if (realizes != oldRealizes)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FacePackage.UOP_UNIT_OF_PORTABILITY__REALIZES, oldRealizes, realizes));
      }
    }
    return realizes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UopAbstractUoP basicGetRealizes()
  {
    return realizes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRealizes(UopAbstractUoP newRealizes)
  {
    UopAbstractUoP oldRealizes = realizes;
    realizes = newRealizes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__REALIZES, oldRealizes, realizes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopProgrammingLanguage getTransportAPILanguage()
  {
    return transportAPILanguage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransportAPILanguage(UopProgrammingLanguage newTransportAPILanguage)
  {
    UopProgrammingLanguage oldTransportAPILanguage = transportAPILanguage;
    transportAPILanguage = newTransportAPILanguage == null ? TRANSPORT_API_LANGUAGE_EDEFAULT : newTransportAPILanguage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__TRANSPORT_API_LANGUAGE, oldTransportAPILanguage, transportAPILanguage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopPartitionType getPartitionType()
  {
    return partitionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPartitionType(UopPartitionType newPartitionType)
  {
    UopPartitionType oldPartitionType = partitionType;
    partitionType = newPartitionType == null ? PARTITION_TYPE_EDEFAULT : newPartitionType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__PARTITION_TYPE, oldPartitionType, partitionType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopFaceProfile getFaceProfile()
  {
    return faceProfile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFaceProfile(UopFaceProfile newFaceProfile)
  {
    UopFaceProfile oldFaceProfile = faceProfile;
    faceProfile = newFaceProfile == null ? FACE_PROFILE_EDEFAULT : newFaceProfile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__FACE_PROFILE, oldFaceProfile, faceProfile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopDesignAssuranceLevel getDesignAssuranceLevel()
  {
    return designAssuranceLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDesignAssuranceLevel(UopDesignAssuranceLevel newDesignAssuranceLevel)
  {
    UopDesignAssuranceLevel oldDesignAssuranceLevel = designAssuranceLevel;
    designAssuranceLevel = newDesignAssuranceLevel == null ? DESIGN_ASSURANCE_LEVEL_EDEFAULT : newDesignAssuranceLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_LEVEL, oldDesignAssuranceLevel, designAssuranceLevel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopDesignAssuranceStandard getDesignAssuranceStandard()
  {
    return designAssuranceStandard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDesignAssuranceStandard(UopDesignAssuranceStandard newDesignAssuranceStandard)
  {
    UopDesignAssuranceStandard oldDesignAssuranceStandard = designAssuranceStandard;
    designAssuranceStandard = newDesignAssuranceStandard == null ? DESIGN_ASSURANCE_STANDARD_EDEFAULT : newDesignAssuranceStandard;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_STANDARD, oldDesignAssuranceStandard, designAssuranceStandard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UopRAMMemoryRequirements getMemoryRequirements()
  {
    return memoryRequirements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMemoryRequirements(UopRAMMemoryRequirements newMemoryRequirements, NotificationChain msgs)
  {
    UopRAMMemoryRequirements oldMemoryRequirements = memoryRequirements;
    memoryRequirements = newMemoryRequirements;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS, oldMemoryRequirements, newMemoryRequirements);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMemoryRequirements(UopRAMMemoryRequirements newMemoryRequirements)
  {
    if (newMemoryRequirements != memoryRequirements)
    {
      NotificationChain msgs = null;
      if (memoryRequirements != null)
        msgs = ((InternalEObject)memoryRequirements).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS, null, msgs);
      if (newMemoryRequirements != null)
        msgs = ((InternalEObject)newMemoryRequirements).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS, null, msgs);
      msgs = basicSetMemoryRequirements(newMemoryRequirements, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS, newMemoryRequirements, newMemoryRequirements));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UopThread> getThread()
  {
    if (thread == null)
    {
      thread = new EObjectContainmentEList<UopThread>(UopThread.class, this, FacePackage.UOP_UNIT_OF_PORTABILITY__THREAD);
    }
    return thread;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UopSupportingComponent> getSupportingComponent()
  {
    if (supportingComponent == null)
    {
      supportingComponent = new EObjectResolvingEList<UopSupportingComponent>(UopSupportingComponent.class, this, FacePackage.UOP_UNIT_OF_PORTABILITY__SUPPORTING_COMPONENT);
    }
    return supportingComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UopConnection> getConnection()
  {
    if (connection == null)
    {
      connection = new EObjectContainmentEList<UopConnection>(UopConnection.class, this, FacePackage.UOP_UNIT_OF_PORTABILITY__CONNECTION);
    }
    return connection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UopLifeCycleManagementPort> getLcmPort()
  {
    if (lcmPort == null)
    {
      lcmPort = new EObjectContainmentEList<UopLifeCycleManagementPort>(UopLifeCycleManagementPort.class, this, FacePackage.UOP_UNIT_OF_PORTABILITY__LCM_PORT);
    }
    return lcmPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegrationIntegrationContext getImplementedBy()
  {
    if (implementedBy != null && implementedBy.eIsProxy())
    {
      InternalEObject oldImplementedBy = (InternalEObject)implementedBy;
      implementedBy = (IntegrationIntegrationContext)eResolveProxy(oldImplementedBy);
      if (implementedBy != oldImplementedBy)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FacePackage.UOP_UNIT_OF_PORTABILITY__IMPLEMENTED_BY, oldImplementedBy, implementedBy));
      }
    }
    return implementedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntegrationIntegrationContext basicGetImplementedBy()
  {
    return implementedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImplementedBy(IntegrationIntegrationContext newImplementedBy)
  {
    IntegrationIntegrationContext oldImplementedBy = implementedBy;
    implementedBy = newImplementedBy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FacePackage.UOP_UNIT_OF_PORTABILITY__IMPLEMENTED_BY, oldImplementedBy, implementedBy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS:
        return basicSetMemoryRequirements(null, msgs);
      case FacePackage.UOP_UNIT_OF_PORTABILITY__THREAD:
        return ((InternalEList<?>)getThread()).basicRemove(otherEnd, msgs);
      case FacePackage.UOP_UNIT_OF_PORTABILITY__CONNECTION:
        return ((InternalEList<?>)getConnection()).basicRemove(otherEnd, msgs);
      case FacePackage.UOP_UNIT_OF_PORTABILITY__LCM_PORT:
        return ((InternalEList<?>)getLcmPort()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FacePackage.UOP_UNIT_OF_PORTABILITY__REALIZES:
        if (resolve) return getRealizes();
        return basicGetRealizes();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__TRANSPORT_API_LANGUAGE:
        return getTransportAPILanguage();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__PARTITION_TYPE:
        return getPartitionType();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__FACE_PROFILE:
        return getFaceProfile();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_LEVEL:
        return getDesignAssuranceLevel();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_STANDARD:
        return getDesignAssuranceStandard();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS:
        return getMemoryRequirements();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__THREAD:
        return getThread();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__SUPPORTING_COMPONENT:
        return getSupportingComponent();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__CONNECTION:
        return getConnection();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__LCM_PORT:
        return getLcmPort();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__IMPLEMENTED_BY:
        if (resolve) return getImplementedBy();
        return basicGetImplementedBy();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FacePackage.UOP_UNIT_OF_PORTABILITY__REALIZES:
        setRealizes((UopAbstractUoP)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__TRANSPORT_API_LANGUAGE:
        setTransportAPILanguage((UopProgrammingLanguage)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__PARTITION_TYPE:
        setPartitionType((UopPartitionType)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__FACE_PROFILE:
        setFaceProfile((UopFaceProfile)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_LEVEL:
        setDesignAssuranceLevel((UopDesignAssuranceLevel)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_STANDARD:
        setDesignAssuranceStandard((UopDesignAssuranceStandard)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS:
        setMemoryRequirements((UopRAMMemoryRequirements)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__THREAD:
        getThread().clear();
        getThread().addAll((Collection<? extends UopThread>)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__SUPPORTING_COMPONENT:
        getSupportingComponent().clear();
        getSupportingComponent().addAll((Collection<? extends UopSupportingComponent>)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__CONNECTION:
        getConnection().clear();
        getConnection().addAll((Collection<? extends UopConnection>)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__LCM_PORT:
        getLcmPort().clear();
        getLcmPort().addAll((Collection<? extends UopLifeCycleManagementPort>)newValue);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__IMPLEMENTED_BY:
        setImplementedBy((IntegrationIntegrationContext)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_UNIT_OF_PORTABILITY__REALIZES:
        setRealizes((UopAbstractUoP)null);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__TRANSPORT_API_LANGUAGE:
        setTransportAPILanguage(TRANSPORT_API_LANGUAGE_EDEFAULT);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__PARTITION_TYPE:
        setPartitionType(PARTITION_TYPE_EDEFAULT);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__FACE_PROFILE:
        setFaceProfile(FACE_PROFILE_EDEFAULT);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_LEVEL:
        setDesignAssuranceLevel(DESIGN_ASSURANCE_LEVEL_EDEFAULT);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_STANDARD:
        setDesignAssuranceStandard(DESIGN_ASSURANCE_STANDARD_EDEFAULT);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS:
        setMemoryRequirements((UopRAMMemoryRequirements)null);
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__THREAD:
        getThread().clear();
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__SUPPORTING_COMPONENT:
        getSupportingComponent().clear();
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__CONNECTION:
        getConnection().clear();
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__LCM_PORT:
        getLcmPort().clear();
        return;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__IMPLEMENTED_BY:
        setImplementedBy((IntegrationIntegrationContext)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FacePackage.UOP_UNIT_OF_PORTABILITY__REALIZES:
        return realizes != null;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__TRANSPORT_API_LANGUAGE:
        return transportAPILanguage != TRANSPORT_API_LANGUAGE_EDEFAULT;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__PARTITION_TYPE:
        return partitionType != PARTITION_TYPE_EDEFAULT;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__FACE_PROFILE:
        return faceProfile != FACE_PROFILE_EDEFAULT;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_LEVEL:
        return designAssuranceLevel != DESIGN_ASSURANCE_LEVEL_EDEFAULT;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__DESIGN_ASSURANCE_STANDARD:
        return designAssuranceStandard != DESIGN_ASSURANCE_STANDARD_EDEFAULT;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__MEMORY_REQUIREMENTS:
        return memoryRequirements != null;
      case FacePackage.UOP_UNIT_OF_PORTABILITY__THREAD:
        return thread != null && !thread.isEmpty();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__SUPPORTING_COMPONENT:
        return supportingComponent != null && !supportingComponent.isEmpty();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__CONNECTION:
        return connection != null && !connection.isEmpty();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__LCM_PORT:
        return lcmPort != null && !lcmPort.isEmpty();
      case FacePackage.UOP_UNIT_OF_PORTABILITY__IMPLEMENTED_BY:
        return implementedBy != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (transportAPILanguage: ");
    result.append(transportAPILanguage);
    result.append(", partitionType: ");
    result.append(partitionType);
    result.append(", faceProfile: ");
    result.append(faceProfile);
    result.append(", designAssuranceLevel: ");
    result.append(designAssuranceLevel);
    result.append(", designAssuranceStandard: ");
    result.append(designAssuranceStandard);
    result.append(')');
    return result.toString();
  }

} //UopUnitOfPortabilityImpl
