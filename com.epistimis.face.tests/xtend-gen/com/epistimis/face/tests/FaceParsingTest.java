/**
 * generated by Xtext 2.30.0
 */
package com.epistimis.face.tests;

import com.epistimis.face.face.ArchitectureModel;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(FaceInjectorProvider.class)
@SuppressWarnings("all")
public class FaceParsingTest {
  @Inject
  private ParseHelper<ArchitectureModel> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("am CommonCo \"\"{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("dm DataModel {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("cdm Structures {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("observable Question \"A question that needs to be addressed\";");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("observable Answer  \"The answer to a question\";");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* TODO: Can a CommonCo customer be someone other than the insured party? If so, what do we need to track to ");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* determine that relationship and if appropriate authorizations are in place?");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("centity Customer \"The CommonCo customer. This may not be the insured party. \" : PPT.Conceptual.NaturalPerson  {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.NonPhysicalAddress \tphoneForText[0:1] \t\t\"This specific phone used for texting\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.NonPhysicalAddress \tphones[0:-1] \t\t\t\"All phones. Any \'phoneForText\' shoudl be here also\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.AccessKey  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassword[1:5] \t\t\t\"password (history) - first is current, others are just so people don\'t repeat passwords\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.Time.CalendarTime \tdob[1:1] \t\t\t\t\"Date of birth\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.Decision\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprivacyConsents[1:-1] \t\"History of privacy consents\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.Decision\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttermsCondsConsents[1:-1] \"History of terms & conditions consents\";\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Insurance\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsurance[0:-1] \t\t\"All the insurances the Customer has\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("QA\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tqsAndAs[0:-1]\t\t\t\"All the questions asked by the customer (and their answers)\";");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* Question content could be anything. Some content will be sensitive.");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* TODO: Do these questions have unique IDs? Or are they just addressed in list order? Generally, how do we deal with UniqueIDs -");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* which are really an implementation detail");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("centity QA \"A customer question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Question \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tquestion[1:1] \t\t\"The question to answer\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.People.Health\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedicalCondition[0:-1] \"The medical condition this relates to, if any. Could be more than one\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Answer   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tanswer[0:-1]  \t\t\"The set of answers to the question\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.Decision \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdecision[0:1] \t\t\"If the question results in a decision, that is stored here.\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("QA\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubquestions[0:-1]  \"One question may spur others\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.State.ConfigurationState \tsensitivity[0:1] \t\"The sensitivity of this content. If not specified, this content is sensitive\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.State.ValidityState \t\t\tvalidity[0:1] \t\t\"How valid is this content. If not specified, the content is assumed to be valid\";\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("centity Advocate \"A CommonCo advocate\" : PPT.Conceptual.NaturalPerson {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Customer\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomers[0:-1]\t\t\"All the customers for this Advocate\";\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cassoc Insurance \"Insurance Info\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.Identifier.Identifier group[1:1] \"The group this is part of\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.Identifier.Identifier member[1:1] \"The member of the group\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("participants: [");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("PPT.Conceptual.LegalOrganization \tinsuranceOrganization[1:1] \"The insurance company\" {src: [1:1]} ;");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("PPT.Conceptual.NaturalPerson \t\tinsured[1:1] \"The insured\" {src: [1:1]} ;");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("PPT.Conceptual.NaturalPerson \t\tdependents[0:-1] \"Dependents, if any. \" {src: [1:1]} ;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("]\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("cdm Queries \"The queries used for this model\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery FullCustomerRecord \"All the Customer Data\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec:\"SELECT * FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery Login \"Info needed for to log into an existing account\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec:\"SELECT Customer.name, Customer.password FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery BillingInfo \"Info needed for billing\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name, Customer.address  FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery Ack \"Info needed for acknowledgement\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery NewCustomerQuestion \"Info for a question from Customer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name, QA.question, QA.medicalCondition FROM Customer JOIN QA ON Customer.qsAndAs\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery RequestMore \"Info needed for request\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.question as startingQ, QA.question as newQ FROM QA JOIN QA ON startingQ.subquestions = newQ\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("//\t\t\tcquery AdvocateResponse \"Question answered by Advocate\" {");
      _builder.newLine();
      _builder.append("//\t\t\t\tspec: \"SELECT Customer.name, QA.* FROM Customer JOIN QA ON Customer.qsAndAs\"");
      _builder.newLine();
      _builder.append("//\t\t\t};");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("  \t\t\t");
      _builder.append("cquery RequestCustomerData \"Info needed for customer Dashboard\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* Because this is just the answer associated with a question, it could be the main question or a subquestion -");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* no matter who asks it.");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery NewAnswer \"Info answering a question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.question, QA.answer FROM QA \"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("  ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery RequestListOfCustomers \"All the customers associated with this Advocate\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Advocate.name FROM Advocate\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery RetrieveListOfCustomers \"All the customers associated with this Advocate\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer JOIN Advocate ON Advocate.customers\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery RequestCustomerQuestionsList \"Get all the questions associated with this Customer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery RetrieveCustomerQuestionsList \"All info related to a specific customer question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name, QA.question FROM Customer JOIN QA on Customer.qsAndAs\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery RequestQuestionDetail \"Request detail on a question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.question FROM QA\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cquery RetrieveQuestionDetail \"All info related to a specific question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.* FROM QA\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final ArchitectureModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void loadModel2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* TODO: ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("am CommonCo \"\"{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("dm DataModel {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("cdm Structures {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("observable Question \"A question that needs to be addressed\";");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("observable Answer  \"The answer to a question\";");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* TODO: Can a CommonCo customer be someone other than the insured party? If so, what do we need to track to ");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* determine that relationship and if appropriate authorizations are in place?");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("centity Customer \"The CommonCo customer. This may not be the insured party. \" : PPT.Conceptual.NaturalPerson  {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.NonPhysicalAddress \tphoneForText[0:1] \t\t\"This specific phone used for texting\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.NonPhysicalAddress \tphones[0:-1] \t\t\t\"All phones. Any \'phoneForText\' shoudl be here also\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.AccessKey  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpassword[1:5] \t\t\t\"password (history) - first is current, others are just so people don\'t repeat passwords\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.Time.CalendarTime \tdob[1:1] \t\t\t\t\"Date of birth\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.Decision\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprivacyConsents[1:-1] \t\"History of privacy consents\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.Decision\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttermsCondsConsents[1:-1] \"History of terms & conditions consents\";\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Insurance\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinsurance[0:-1] \t\t\"All the insurances the Customer has\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("QA\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tqsAndAs[0:-1]\t\t\t\"All the questions asked by the customer (and their answers)\";");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* Question content could be anything. Some content will be sensitive.");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* TODO: Do these questions have unique IDs? Or are they just addressed in list order? Generally, how do we deal with UniqueIDs -");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* which are really an implementation detail");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("centity QA \"A customer question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Question \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tquestion[1:1] \t\t\"The question to answer\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.People.Health\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmedicalCondition[0:-1] \"The medical condition this relates to, if any. Could be more than one\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Answer   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tanswer[0:-1]  \t\t\"The set of answers to the question\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Privacy.General.Decision \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdecision[0:1] \t\t\"If the question results in a decision, that is stored here.\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("QA\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubquestions[0:-1]  \"One question may spur others\";");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.State.ConfigurationState \tsensitivity[0:1] \t\"The sensitivity of this content. If not specified, this content is sensitive\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.State.ValidityState \t\t\tvalidity[0:1] \t\t\"How valid is this content. If not specified, the content is assumed to be valid\";\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("centity Advocate \"A CommonCo advocate\" : PPT.Conceptual.NaturalPerson {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Customer\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustomers[0:-1]\t\t\"All the customers for this Advocate\";\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cassoc Insurance \"Insurance Info\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.Identifier.Identifier group[1:1] \"The group this is part of\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Conceptual_Model.FACE_Shared_Data_Model_Conceptual.Observables.Identifier.Identifier member[1:1] \"The member of the group\";");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("participants: [");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("PPT.Conceptual.LegalOrganization \tinsuranceOrganization[1:1] \"The insurance company\" {src: [1:1]} ;");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("PPT.Conceptual.NaturalPerson \t\tinsured[1:1] \"The insured\" {src: [1:1]} ;");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("PPT.Conceptual.NaturalPerson \t\tdependents[0:-1] \"Dependents, if any. \" {src: [1:1]} ;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("]\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pdm Queries \"The queries used for this model\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery FullCustomerRecord \"All the Customer Data\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec:\"SELECT * FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery Login \"Info needed for to log into an existing account\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec:\"SELECT Customer.name, Customer.password FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery BillingInfo \"Info needed for billing\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name, Customer.address  FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery Ack \"Info needed for acknowledgement\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery NewCustomerQuestion \"Info for a question from Customer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name, QA.question, QA.medicalCondition FROM Customer JOIN QA ON Customer.qsAndAs\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery RequestMore \"Info needed for request\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.question as startingQ, QA.question as newQ FROM QA JOIN QA ON startingQ.subquestions = newQ\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("//\t\t\tpquery AdvocateResponse \"Question answered by Advocate\" {");
      _builder.newLine();
      _builder.append("//\t\t\t\tspec: \"SELECT Customer.name, QA.* FROM Customer JOIN QA ON Customer.qsAndAs\"");
      _builder.newLine();
      _builder.append("//\t\t\t};");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("  \t\t\t");
      _builder.append("pquery RequestCustomerData \"Info needed for customer Dashboard\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* Because this is just the answer associated with a question, it could be the main question or a subquestion -");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* no matter who asks it.");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery NewAnswer \"Info answering a question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.question, QA.answer FROM QA \"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("  ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery RequestListOfCustomers \"All the customers associated with this Advocate\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Advocate.name FROM Advocate\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery RetrieveListOfCustomers \"All the customers associated with this Advocate\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer JOIN Advocate ON Advocate.customers\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery RequestCustomerQuestionsList \"Get all the questions associated with this Customer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name FROM Customer\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery RetrieveCustomerQuestionsList \"All info related to a specific customer question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT Customer.name, QA.question FROM Customer JOIN QA on Customer.qsAndAs\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery RequestQuestionDetail \"Request detail on a question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.question FROM QA\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("pquery RetrieveQuestionDetail \"All info related to a specific question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("spec: \"SELECT QA.* FROM QA\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("um Components \"Software Components Used\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ patientRegistration \"This is the message where patients register for an appointment\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \" main (Patient) { Patient.name; Patient.id; Patient.phone; Patient.address; Patient.health; Patient.religion;}\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.BillingInfo");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ patientRegAck \"This acknowledges the registration\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \" main (Patient) { Patient.name;  }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.Ack \t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ patientExternalActionLogging \"The info used when logging a new appointment\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \"main (Patient) { Patient.name; Patient.id }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.Ack");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ systemAck \"The info used when ack\'ing a xaction\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \"main (Patient) { Patient.name; Patient.id }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.Ack");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ patientReview \"This is the message where doctors review a patient record\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \" main (Patient) { Patient.name; Patient.id; Patient.health;  }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.BillingInfo");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ patientReviewAck \"This acknowledges a patient record review\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \" main (Patient) { Patient.name; Patient.id; Patient.health;  }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.Ack");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ patientReviewLogging \"The info used when logging doctor\'s/ chaplain\'s review\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \"main (Patient, Employee) { Patient.name; Patient.id; Patient.health; }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.FullCustomerRecord ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}; ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ patientChaplainReview \"This is the message where chaplains review a patient record\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \" main (Patient) { Patient.name; Patient.id; Patient.health; Patient.religion }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.BillingInfo");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("templ DBLogging \"General DB Logging\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("spec: \"main (DBLogging) { DBLogging.timestamp, DBLogging.processID, DBLogging.version, DBLogging.status }\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("bound: DataModel.Queries.FullCustomerRecord");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pc CreateAnAccount \"This is where new Customers sign up\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("lang: Ada");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn NewAccountInfo \"Send new accnt info / ack back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [ patientRegistration  /  patientRegAck ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]  ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};   ");
      _builder.newLine();
      _builder.append("\t\t   ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pc LogIn \"This is where existing Customers sign in\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("lang: Java");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn LoginInfo \"Send login info / ack back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [ patientReview /  systemAck ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]  ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}; ");
      _builder.newLine();
      _builder.append("\t\t\t     ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pc SubmitNewCustomerForm \"This is where existing Customers create their initial  info record\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("lang: C");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("/** This could also be the billing info because of how the new customer is set up */");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("simconn Login \"Receiving a successful login\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: InboundMessage  patientRegistration ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn CustomerInfo \"Send base customer info / ack back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [ patientReview / systemAck ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]  ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}; ");
      _builder.newLine();
      _builder.append("\t\t\t     ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pc SubmitCustomerRequestForm \"This is where existing Customers add a new request\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("lang: Scala");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("simconn Login \"Receiving a successful login\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: InboundMessage  patientRegistration");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestInfo \"Send new request / ack back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [ patientReview / patientReviewAck ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]  ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};      ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pc AdvocateReview \"Advocate reviews requests - \" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("lang: Rust");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("simconn Advocate \"Send customer rec and request info \" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: InboundMessage    patientChaplainReview   ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestListOfCustomers \"Get the outstanding list of customers for this advocate\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: [ patientChaplainReview / DataModel.Queries.RetrieveCustomerQuestionsList ]");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestCustomerInfo \"Get the outstanding list of questions for a specific customer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: [  DataModel.Queries.RequestCustomerData /  DataModel.Queries.RetrieveCustomerQuestionsList ]");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestQuestionList \"Get my list of questions/ send list back back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.RequestCustomerData  /  DataModel.Queries.RetrieveCustomerQuestionsList ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestQuestionDetails \"Get the details on a specific question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: [  DataModel.Queries.RequestQuestionDetail  /  DataModel.Queries.RetrieveQuestionDetail ]");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role:  client");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("simconn MoreInfoRequest \"Request more info from customer - this creates a new subquestion\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: OutboundMessage  DataModel.Queries.RequestMore ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("simconn AdvResponse \"Advocate sends response back to customer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: OutboundMessage  DataModel.Queries.NewAnswer");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("]  ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};      ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pc CustomerDashboard \"Where the customer can see everything\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("lang: Typescript");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestCustomerInfo \"Request my customer info  / send it back  - used for account mgt\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.RequestCustomerData  /  DataModel.Queries.FullCustomerRecord ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestQuestionList \"Get my list of questions/ send list back back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.RequestCustomerData  /  DataModel.Queries.RetrieveCustomerQuestionsList ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestQuestionDetails \"Get details for a specific question/ send it back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.RequestQuestionDetail  /  DataModel.Queries.RetrieveQuestionDetail ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("simconn SendAnswer \"Send the  answer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("msg: OutboundMessage  DataModel.Queries.NewAnswer  \t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]  ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("pc Datastore \"The component that handles persistent storage\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("lang: Unspecified");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn StoreNewLogin \"store received new customer billing info (full record not there yet)\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.BillingInfo  /  DataModel.Queries.Ack ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("role: server \t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RetrieveLogin \"retrieve login info \" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.Ack  /  DataModel.Queries.Login ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("role: server \t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn StoreCustomerInfo \"store received customer info\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.FullCustomerRecord  /  DataModel.Queries.Ack ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("role: server \t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn StoreCustomerQ \"store received customer question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.NewCustomerQuestion  /  DataModel.Queries.Ack ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("role: server \t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestListOfCustomers \"Get the outstanding list of customers for this advocate\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: [  DataModel.Queries.RequestListOfCustomers /  DataModel.Queries.RetrieveCustomerQuestionsList ]");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: server");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestCustomerInfo \"Get the outstanding list of questions for a specific customer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: [  DataModel.Queries.RequestCustomerData /  DataModel.Queries.RetrieveCustomerQuestionsList ]");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: server");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestQuestionList \"Get my list of questions/ send list back back\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg:  [  DataModel.Queries.RequestCustomerData  /  DataModel.Queries.RetrieveCustomerQuestionsList ] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role: client ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("} ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("csconn RequestQuestionDetails \"Get the details on a specific question\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("msg: [  DataModel.Queries.RequestQuestionDetail  /  DataModel.Queries.RetrieveQuestionDetail ]");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("role:  server");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("simconn StoreAnswer \"store received answer\" {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("msg: InboundMessage  DataModel.Queries.NewAnswer  \t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* TODO: Need a mechanism to easily create one instance of each PC/PSC in associated UM automatically");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* so we don\'t have to manually create them. That should also default to use all the inputs and outputs");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* defined in the component. (Its easier to delete stuff you don\'t want than add it)");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* TODO: Each Integration creates a business flow. So this should be associated with a business type.");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* TODO: Are there standard functions (like logging) that we should ask about? That might depend on business type");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* (e.g. HIPAA may require certain auditing functions.)");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* ");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* TODO: Do we attempt to detect if some flows require synchronization?");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("im Integration \"CommonCo Integration / wiring diagram\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("* The primary instances will run in California");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst CreateAnAccount1 \"An Instance of the CreateAnAccount Page\" -> Components.CreateAnAccount {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("output: [ Components.CreateAnAccount.NewAccountInfo]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst Login1 \"An Instance of the Login Page\" -> Components.LogIn {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("output: [ Components.LogIn.LoginInfo ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst SubmitNewCustomerForm1 \"An Instance of the New Customer Info page\" -> Components.SubmitNewCustomerForm {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input: [ Components.SubmitNewCustomerForm.Login]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("output: [ Components.SubmitNewCustomerForm.CustomerInfo ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst SubmitCustomerRequestForm1 \"An Instance of the Customer New Request form\" -> Components.SubmitCustomerRequestForm {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input: [Components.SubmitCustomerRequestForm.Login]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("output: [ Components.SubmitCustomerRequestForm.RequestInfo ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst AdvocateReview1 \"An Instance of the Advocate Review Dashboard\" -> Components.AdvocateReview {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input: [ Components.AdvocateReview.Advocate  ]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("output: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.AdvocateReview.RequestListOfCustomers");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.AdvocateReview.RequestCustomerInfo");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.AdvocateReview.RequestQuestionDetails\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.AdvocateReview.MoreInfoRequest");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.AdvocateReview.AdvResponse ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.AdvocateReview.RequestQuestionList\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst CustomerDashboard1 \"An Instance of the Customer Dashboard\" -> Components.CustomerDashboard {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("output: [ ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.CustomerDashboard.RequestCustomerInfo");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.CustomerDashboard.RequestQuestionList");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.CustomerDashboard.RequestQuestionDetails\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.CustomerDashboard.SendAnswer\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst Datastore1 \"An Instance of the Datastore\" -> Components.Datastore {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("* TODO: verify that C/S can be on both input and output");
      _builder.newLine();
      _builder.append("\t\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("input: [");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.StoreNewLogin");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.RetrieveLogin");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.StoreCustomerInfo ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.StoreCustomerQ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.RequestListOfCustomers ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.RequestCustomerInfo \t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.RequestQuestionList \t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.RequestQuestionDetails \t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("Components.Datastore.StoreAnswer \t// This last one is a simconn, so no corresponding output\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ic NorthAmericanWiring \"The wiring diagram for NA\" {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("conn: [");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.CreateAnAccount1.output0 -> CommonCo.Integration.Datastore1.input0)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.CreateAnAccount1.output0 -> CommonCo.Integration.SubmitNewCustomerForm1.input0)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.Login1.output0 -> CommonCo.Integration.SubmitCustomerRequestForm1.input0)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.SubmitNewCustomerForm1.output0 -> CommonCo.Integration.Datastore1.input2)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.SubmitCustomerRequestForm1.output0 -> CommonCo.Integration.Datastore1.input2)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.SubmitCustomerRequestForm1.output0 -> CommonCo.Integration.AdvocateReview1.input0)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.AdvocateReview1.output0 -> CommonCo.Integration.Datastore1.input4)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.AdvocateReview1.output1 -> CommonCo.Integration.Datastore1.input5)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.AdvocateReview1.output2 -> CommonCo.Integration.Datastore1.input7)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.AdvocateReview1.output3 -> CommonCo.Integration.Datastore1.input3)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.AdvocateReview1.output4 -> CommonCo.Integration.Datastore1.input8)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.AdvocateReview1.output5 -> CommonCo.Integration.Datastore1.input6)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.CustomerDashboard1.output0 -> CommonCo.Integration.Datastore1.input5)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.CustomerDashboard1.output1 -> CommonCo.Integration.Datastore1.input6)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.CustomerDashboard1.output2 -> CommonCo.Integration.Datastore1.input7)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("( U2U CommonCo.Integration.CustomerDashboard1.output3 -> CommonCo.Integration.Datastore1.input8)");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("* A second set of instances that can be used as backups - if we choose to create them");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("/*\t\t ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("uinst CreateAnAccount2 \"An Backup Instance of the CreateAnAccount Page\" -> Components.CreateAnAccount {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("location: Privacy.General.CommonJurisdictions.EuropeanUnion.Ireland");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("output:  [ Components.CreateAnAccount.NewAccountInfo ] ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final ArchitectureModel result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
